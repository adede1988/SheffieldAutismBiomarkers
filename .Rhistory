theme(axis.ticks.length=unit(-0.5, "cm"),
axis.line = element_line(colour = 'black', size = 3),
axis.ticks = element_line(colour = 'black', size = 3)) +
scale_x_continuous(expand = c(0, 0), limits = c(0, 1), breaks = seq(0,1,.1)) +
scale_y_continuous(expand = c(0, 0))+
geom_vline(xintercept = .8, linetype = 'dashed', size = 5)
png(paste(figPath, 'stability_', predNames[vari], '_', '.png',sep=''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
# }
}
#### table 2: what's the number of 'good' predictors as a function of age and predictor? ####
goodPreds = data.frame('age'= c(0,0,0),
'sex'= c(0,0,0),
'IQ'= c(0,0,0),
'diagnosis'= c(0,0,0),
row.names = ageLabs)
#this data frame is used to make supplemental table 1
allVarsPredByDiag = data.frame('dependentVariable' = c(0),
'Diag' = c(0),
'diag_b1' = c(0),
'diag_b2' = c(0),
'age' = c(0))
alli = 1
for(vari in 1:4) {
for(agei in 1:3){
temp = resultsDif[resultsDif$ageGroup == agei,]
tempRes = resultsTRAIN[resultsDif$ageGroup == agei,]
candidates = which(temp[predNames[vari]] > .8 & tempRes[predNames[vari]] > thresh)
if(vari==4){
allVarsPredByDiag[alli:(length(candidates)+alli-1),1:4] = tempRes[candidates,c(1,5,9,10)]
allVarsPredByDiag[alli:(length(candidates)+alli-1),5] = agei
alli = alli + length(candidates)
}
goodPreds[agei,vari] = length(candidates)
}
}
goodPreds %>%
kbl(align = 'c') %>%
kable_classic(full_width = F,
font_size = 20) %>%
column_spec(1, border_right = T)%>%
footnote(general = "Performance of different predictors in each age group.
Number of independent variables predicted with \U1D702\U00B2\U209A > .05 and stability > .80",
general_title = "Table 2: ",
footnote_as_chunk = T, title_format = c("italic", "underline")
)
chisq.test(goodPreds)
#### choosing the best plot for each
# datTrain = read.csv("C:\\Users\\Adam Dede\\Documents\\GitHub\\SheffieldAutismBiomarkers\\trainSet.csv")
# datTrain = read.csv(paste(path, "trainSet.csv", sep = ''))
# datTrain <- datTrain %>% select(-X)
comboDat = rbind(datTrain, dat)
comboDat$ageGroup = 1
comboDat$ageGroup[comboDat$age>ageGroups[2]] = 2
comboDat$ageGroup[comboDat$age>ageGroups[3]] = 3
comboDat$ageGroup = as.factor(comboDat$ageGroup)
#quick check of how many participants had missing data for alpha peak calculation
test = comboDat[,(grepl('logAlpha', names(comboDat)) | grepl('relAlpha', names(comboDat)))]
sum(apply(as.matrix(test), 1, function(x) sum(is.na(x)))> 0) #how many participants had at least one miss?
sum(apply(as.matrix(test), 1, function(x) sum(is.na(x)))> 5) #how many participants had more than 5 misses?
1-sum(apply(as.matrix(test), 1, function(x) sum(is.na(x))))/(776*36) #what proportion were well fit?
## PLOTS FOR AGE!
vari = 1
for(agei in 1:3){
temp = resultsDif[resultsDif$ageGroup == agei,]
tempRes = resultsTRAIN[resultsDif$ageGroup == agei,]
candidates = which(temp[predNames[vari]] > .8 & tempRes[predNames[vari]] > thresh)
target = candidates[which(tempRes[candidates,predNames[vari]]==max(tempRes[candidates,predNames[vari]]))]
targName = temp$dependentVariable[target]
if(length(target)>0){
limVals = quantile(comboDat[,targName], c(.1,.9), na.rm = T)
limVals = c(limVals[1] - (limVals[2]-limVals[1])*.2,
limVals[2] + (limVals[2]-limVals[1])*.2)
outPlot <- ggplot(comboDat, aes_string(x = 'age', y = targName, color = 'group', shape = 'sex', size = 'IQ')) +
geom_jitter(alpha = .75)+
scale_color_manual(values=c( "#E1C271", "#3BACDD","#4E554E"),
labels=c(  'AD', 'ASD', 'CON')) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
ylim(limVals) +
ylab(targName) +
ggtitle(paste(targName, '; age group: ', as.character(agei), sep = ''))+
guides(color = guide_legend(override.aes = list(size=10)),
shape = guide_legend(override.aes = list(size=10))) +
geom_vline(xintercept = ageGroups[2], linetype = 'dashed', linewidth = 2, alpha = .75)+
geom_vline(xintercept = ageGroups[3], linetype = 'dashed', linewidth = 2, alpha = .75)
# rect(1, 5, 3, 7, col="white")
png(paste(figPath, 'bestPredicted_',predNames[vari],'_', agei, '.png', sep = ''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
}
}
## PLOTS FOR SEX!
vari = 2
for(agei in 1:3){
temp = resultsDif[resultsDif$ageGroup == agei,]
tempRes = resultsTRAIN[resultsDif$ageGroup == agei,]
candidates = which(temp[predNames[vari]] > .8 & tempRes[predNames[vari]] > thresh)
target = candidates[which(tempRes[candidates,predNames[vari]]==max(tempRes[candidates,predNames[vari]]))]
targName = temp$dependentVariable[target]
if(length(target)>0){
limVals = quantile(comboDat[,targName], c(.1,.9), na.rm = T)
limVals = c(limVals[1] - (limVals[2]-limVals[1])*.2,
limVals[2] + (limVals[2]-limVals[1])*.2)
outPlot <-  comboDat %>%
ggplot(aes_string(x = 'ageGroup', y = targName, fill = 'sex')) +
# geom_violin(draw_quantiles = c(.25, .5, .75), alpha = .5) +
geom_boxplot(outlier.shape = NA, alpha = .75, position = position_dodge(.9)) + #width = .6, coef = 0
geom_jitter(show.legend = F, shape = 21, size = 4,
position = position_jitterdodge(dodge.width = .9)) +
# stat_summary(fun = median, geom = 'crossbar' ) +
# geom_dotplot(binaxis = 'y', show.legend = F, stackdir = 'center',
#              position=position_dodge(1), dotsize = .30)+
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
ylim(limVals) +
ylab(targName) +
ggtitle(paste(targName, '; age group: ', as.character(agei), sep = ''))+
guides(color = guide_legend(override.aes = list(size=10)),
shape = guide_legend(override.aes = list(size=10)))
# geom_vline(xintercept = ageGroups[2], linetype = 'dashed', linewidth = 2, alpha = .75)+
# geom_vline(xintercept = ageGroups[3], linetype = 'dashed', linewidth = 2, alpha = .75)
# rect(1, 5, 3, 7, col="white")
png(paste(figPath, 'bestPredicted_',predNames[vari],'_', agei, '.png', sep = ''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
}
}
## PLOTS FOR IQ!
# vari = 3
# for(agei in 1:3){
#   temp = resultsDif[resultsDif$ageGroup == agei,]
#   tempRes = resultsTRAIN[resultsDif$ageGroup == agei,]
#   candidates = which(temp[predNames[vari]] < .2 & tempRes[predNames[vari]] > thresh)
#   target = candidates[which(tempRes[candidates,predNames[vari]]==max(tempRes[candidates,predNames[vari]]))]
#   if(length(target)>0){
#     limVals = quantile(comboDat[,varNames[target]], c(.1,.9))
#     limVals = c(limVals[1] - (limVals[2]-limVals[1])*.2,
#                 limVals[2] + (limVals[2]-limVals[1])*.2)
#     outPlot <- ggplot(comboDat, aes_string(x = 'IQ', y = varNames[target], color = 'age', shape = 'group')) +
#       geom_jitter(alpha = .75, size = 7)+
#       # scale_color_manual(values=c( "#E1C271", "#3BACDD","#4E554E"),
#       #                    labels=c(  'AD', 'ASD', 'CON')) +
#       theme_classic() +
#       theme(axis.line = element_line(color = 'black', size = 3),
#             axis.ticks = element_line(colour = "black", size = 2),
#             axis.ticks.length=unit(-.25, "cm"),
#             text = element_text(size = 20)) +
#       ylim(limVals) +
#       ylab(varNames[target]) +
#       ggtitle(paste(varNames[target], '; age group: ', as.character(agei), sep = ''))+
#       guides(color = guide_legend(override.aes = list(size=10)),
#              shape = guide_legend(override.aes = list(size=10)))
#       # geom_vline(xintercept = ageGroups[2], linetype = 'dashed', linewidth = 2, alpha = .75)+
#       # geom_vline(xintercept = ageGroups[3], linetype = 'dashed', linewidth = 2, alpha = .75)
#     # rect(1, 5, 3, 7, col="white")
#     png(paste( 'bestPredicted_',predNames[vari],'_', agei, '.png', sep = ''),         # File name
#         width=1024, height=768)
#     print(outPlot)
#     dev.off()
#   }
# }
## PLOTS FOR Diag!
vari = 4
for(agei in 1:3){
temp = resultsDif[resultsDif$ageGroup == agei,]
tempRes = resultsTRAIN[resultsDif$ageGroup == agei,]
candidates = which(temp[predNames[vari]] > .8 & tempRes[predNames[vari]] > thresh)
# if(agei==1){
#   target = candidates[6]
# }else{
target = candidates[which(tempRes[candidates,'Diag']==max(tempRes[candidates,'Diag']))]
# }
targName = temp$dependentVariable[target]
if(length(target)>0){
limVals = quantile(comboDat[,targName], c(.1,.9), na.rm = T)
limVals = c(limVals[1] - (limVals[2]-limVals[1])*.5,
limVals[2] + (limVals[2]-limVals[1])*.5)
# plotDat <- comboDat %>% filter( group %in% c('CON', 'AD')) %>% arrange(ageGroup, group)
# n = length(plotDat$age)
# plotDat[(n+1):(n+3), varNames[target]] = -1000000
# plotDat[(n+1):(n+3), 'ageGroup'] = c(1,2,3)
# plotDat[(n+1):(n+3), 'group'] = c('CON', 'CON', 'CON')
# plotDat$ageGroup = as.factor(plotDat$ageGroup)
outPlot <-  comboDat %>% #age> ageGroups[agei], age<= ageGroups[agei+1],
ggplot(aes_string(x = 'ageGroup', y = targName, fill = 'group')) +
geom_boxplot(outlier.shape = NA, alpha = .75, position = position_dodge(.85)) + #width = .6, coef = 0
geom_jitter(show.legend = F, shape = 21, size = 4,
position = position_jitterdodge(dodge.width = .85, jitter.width = .2)) +
# geom_violin(draw_quantiles = c(.25, .5, .75))+
scale_fill_manual(values=c( "#E1C271", "#3BACDD","#4E554E"),
labels=c(  'AD', 'ASD', 'CON')) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
ylim(limVals) +
ylab(targName) +
ggtitle(paste(targName, '; age group: ', as.character(agei), sep = ''))+
guides(color = guide_legend(override.aes = list(size=10)))
# rect(1, 5, 3, 7, col="white")
png(paste(figPath, 'bestPredicted_',predNames[vari],'_', agei, '.png', sep = ''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
}
}
########################################################################
#### signal detection theory based analysis of potential biomarkers ####
########################################################################
SDTTable = data.frame('ageGroup' = c('3-96 mon', '98-126 mon', '128-248 mon'),
'AUC'      = c(0,0,0),
'accuracy' = c(0,0,0),
'sensitivity'=c(0,0,0),
'specificity'=c(0,0,0),
'IG_.0148' = c(0,0,0),
'IG_.187' = c(0,0,0),
'FPi_.0148' = c(0,0,0),
'FPi_.187' = c(0,0,0))
plotValues = data.frame('hitRate' = rep(0,300),
'FArate' = rep(0,300),
'precision'=rep(0,300),
'infoGain' = rep(0,300),
'FPi' = rep(0,300),
'ageGroup' = rep(0,300))
for(agei in 1:3){
temp = resultsDif[resultsDif$ageGroup == agei,]
tempRes = resultsTRAIN[resultsDif$ageGroup == agei,]
tempTrain = datTrain %>% filter(age>ageGroups[agei], age <=ageGroups[agei+1])
tempTest = dat %>% filter(age>ageGroups[agei], age <= ageGroups[agei+1])
# tempTest = dat %>% filter(age>ageGroups[agei], age <=ageGroups[agei+1])
candidates = which(temp$Diag > .8 & tempRes$Diag > thresh)
target = candidates[which(tempRes[candidates,'Diag']==max(tempRes[candidates,'Diag']))]
targName = temp$dependentVariable[target]
limVals = quantile(tempTrain[,targName], c(.025,.975), na.rm = T)
# limVals = c(limVals[1] - (limVals[2]-limVals[1])*.5,
#             limVals[2] + (limVals[2]-limVals[1])*.5)
# make edits here for AD vs. CON OR AD+ASD vs. CON
groupID = rep(1,length(tempTrain$group)) # 2 = 'control'
groupID[tempTrain$group != 'CON'] = 2 # 1 = 'patient'
# groupID[tempTrain$group == 'ASD'] = NA
#ALL AD AND ASD SUBS CODED AS 2
biomark = tempTrain[,targName]
missingDat = which(is.na(biomark))
if(length(missingDat)>0){
groupID = groupID[-missingDat]
biomark = biomark[-missingDat]
}
missingDat = which(is.na(groupID))
if(length(missingDat)>0) {
groupID = groupID[-missingDat]
biomark = biomark[-missingDat]
}
#get the variables for the test set:
groupID2 = rep(1,length(tempTest$group)) # 2 = 'control'
groupID2[tempTest$group != 'CON'] = 2 # 2 = 'patient'
# groupID2[tempTest$group == 'ASD'] = NA
#ALL AD AND ASD SUBS CODED AS 2
biomark2 = tempTest[,targName]
missingDat2 = which(is.na(biomark2))
if(length(missingDat2)>0){
groupID2 = groupID2[-missingDat2]
biomark2 = biomark2[-missingDat2]
}
missingDat2 = which(is.na(groupID2))
if(length(missingDat2)>0) {
groupID2 = groupID2[-missingDat2]
biomark2 = biomark2[-missingDat2]
}
criteria = rev(seq(limVals[1], limVals[2], (limVals[2] - limVals[1])/100))
criteria = criteria[1:100]
# #is the AD group higher or lower than the CON group?
# #default is autistic > control
if(mean(biomark[groupID==1]) > mean(biomark[groupID==2])){
print("POTENTIAL PROBLEM")
}
#inverted criterion logic
ROC = getROC(biomark, groupID, criteria)
ROC2 = getROC(biomark2, groupID2, criteria)
# ROC2 = getROC(biomark, groupID, criteria)
ci = which(ROC$acc == max(ROC$acc))
ci = ci[1]
SDTTable$AUC[agei] = paste(round(ROC$AUC[1],2), ' (', round(ROC2$AUC[1],2), ')', sep = '')
SDTTable$accuracy[agei] = paste(round(ROC$acc[ci],2), ' (', round(ROC2$acc[ci],2), ')', sep = '')
SDTTable$sensitivity[agei] = paste(round(ROC$TPR[ci],2), ' (', round(ROC2$TPR[ci],2), ')', sep = '')
SDTTable$specificity[agei] = paste(round(ROC$TNR[ci],2), ' (', round(ROC2$TNR[ci],2), ')', sep = '')
ROC[101:102,] = c(100,100)
ROC$acc[101:102] = c(0,1)
# outPlot <- ggplot(ROC, aes(x=FP, y=TP, size = log10(acc))) +
#   geom_point(show.legend = T, alpha = .75, color = '#228B22') +
#   scale_size_continuous(range = c(.25, 45)) +
#   geom_abline(slope = 1, intercept = 0, size = 2, linetype = 'dashed') +
#   ylim(c(0,1)) +
#   xlim(c(0,1)) +
#   theme_classic() +
#   theme(axis.line = element_line(color = 'black', size = 3),
#         axis.ticks = element_line(colour = "black", size = 2),
#         axis.ticks.length=unit(-.25, "cm"),
#         text = element_text(size = 20),
#         panel.grid.major = element_line(color = "grey",
#                                         size = 2,
#                                         linetype = 2)) +
#   ylab('hit rate') +
#   xlab('false alarm rate') +
#   ggtitle(paste('ROC; age group: ', as.character(agei), sep = ''))
# png(paste( 'bestPredicted_ROC',predNames[vari],'_', agei, '.png', sep = ''),         # File name
#     width=1024, height=768)
# print(outPlot)
# dev.off()
#simulating various base rates
brDF = data.frame('base' = c(seq(.001, 1, .01),.0148,.187),
'infoGain' = c(seq(.001, 1, .01),.0148,.187),
'FPi' = c(seq(.001, 1, .01),.0148,.187),
'PPV' = c(seq(.001, 1, .01),.0148,.187),
'post' = c(seq(.001, 1, .01),.0148,.187))
for(bi in 1:length(brDF$base)){
print(bi)
baseRate = brDF$base[bi]
ADGroup = sample(biomark2[groupID2==2], round(baseRate*100000), replace = T )
CONGroup = sample(biomark2[groupID2==1], round((1-baseRate)*100000), replace = T)
simBiomark = c(ADGroup, CONGroup)
simID = rep(1,length(simBiomark))
simID[1:length(ADGroup)] = 2
simROC = getROC(simBiomark, simID, criteria)
post = simROC$TP[ci]*baseRate / (simROC$TP[ci]*baseRate + simROC$FP[ci]*(1-baseRate))
brDF$infoGain[bi] = post - baseRate
guess = rep(1,length(simBiomark))
guess[simBiomark>criteria[ci]] = 2
brDF$FPi[bi] = sum(guess==2 & simID==1) / sum(guess==2 & simID==2)
brDF$PPV[bi] = simROC$hits[ci] / (simROC$hits[ci] + simROC$FAs[ci])
brDF$post[bi] = post
}
SDTTable$IG_.0148[agei] = brDF$infoGain[101]
SDTTable$IG_.187[agei] = brDF$infoGain[102]
SDTTable$FPi_.0148[agei] = brDF$FPi[101]
SDTTable$FPi_.187[agei] = brDF$FPi[102]
plotValues$hitRate[((agei-1)*100+1):((agei*100))] = ROC$TP[1:100]
plotValues$FArate[((agei-1)*100+1):(agei*100)] = ROC$FP[1:100]
plotValues$precision[((agei-1)*100+1):(agei*100)] = brDF$post[1:100]
plotValues$infoGain[((agei-1)*100+1):(agei*100)] = brDF$infoGain[1:100]
plotValues$FPi[((agei-1)*100+1):(agei*100)] = brDF$FPi[1:100]
plotValues$ageGroup[((agei-1)*100+1):(agei*100)] = agei
outPlot <- ggplot(brDF, aes(x=base, y = post)) +
geom_line(color = '#66023C', size = 5) +
geom_abline(slope = 1, intercept = 0, size = 2, linetype = 'dashed') +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20),
panel.grid.major = element_line(color = "grey",
size = 2,
linetype = 2)) +
ylab('precision') +
ggtitle(paste('posterior probability; age group: ', as.character(agei), sep = ''))
# png(paste( 'bestPredicted_precision',predNames[vari],'_', agei, '.png', sep = ''),         # File name
#     width=1024, height=768)
# print(outPlot)
# dev.off()
outPlot <- ggplot(brDF, aes(x=base, y = infoGain)) +
geom_point(color = '#66023C', size = 5) +
scale_y_log10() +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20),
panel.grid.major = element_line(color = "grey",
size = 2,
linetype = 2)) +
ylim(c(0,.25)) +
ylab('information gain') +
ggtitle(paste('information gain; age group: ', as.character(agei), sep = ''))
# png(paste( 'bestPredicted_infoGain',predNames[vari],'_', agei, '.png', sep = ''),         # File name
#     width=1024, height=768)
# print(outPlot)
# dev.off()
label_at <- function(n) function(x) ifelse(x %% n == 0, x, "")
breakPoints =  c(seq(.02,.1,.02), seq(.2,1,.2), seq(2,10,2), seq(20,100,20),seq(200,1000,200))
outPlot <- ggplot(brDF, aes(x=base, y = FPi)) +
geom_line(color = '#66023C', size = 5) +
scale_y_log10(breaks = breakPoints, labels = c(rep('',4), .1,
rep('',4), 1,
rep('',4), 10,
rep('',4), 100,
rep('',4), 1000)) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20),
panel.grid.major = element_line(color = "grey",
size = 2,
linetype = 2)) +
ylab(targName) +
xlim(c(0,.5))+
ggtitle(paste('false positive index; age group: ', as.character(agei), sep = ''))
# png(paste( 'bestPredicted_FPi',predNames[vari],'_', agei, '.png', sep = ''),         # File name
#     width=1024, height=768)
# print(outPlot)
# dev.off()
}
plotValues$baseRate = rep(brDF$base[1:100], 3)
SDTTable %>%
kbl(align = 'c', digits = 2) %>%
kable_classic(full_width = F,
font_size = 20) %>%
column_spec(1, border_right = T) %>%
footnote(general = "Signal detection theory measures of biomarker performance.
AUC = area under the receiver operating characteristic curve
IG_.0148 = information gain when base rate is .0148
FPi_.0148 = number of false positives for each true positive when base rate is .0148
IG_.187 and FPi_.187 = corresponding values for a base rate of .187",
general_title = "Table 3: ",
footnote_as_chunk = T, title_format = c("italic", "underline")
)
##### plotting signal detection theory measure results ####
plotValues$ageGroup = as.factor(plotValues$ageGroup)
plotValues$ageGroup = factor(plotValues$ageGroup)
outPlot <- ggplot(plotValues, aes(y=hitRate, x=FArate, color = ageGroup)) +
geom_line(show.legend = T, size = 5) +
geom_abline(slope = 1, intercept = 0, size = 2, linetype = 'dashed') +
ylim(c(0,1)) +
xlim(c(0,1)) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20),
panel.grid.major = element_line(color = "grey",
size = 2,
linetype = 2)) +
ylab('hit rate') +
xlab('false alarm rate') +
ggtitle(paste('ROC', sep = ''))
png(paste(figPath, 'ROC_all',predNames[vari],'_', agei, '.png', sep = ''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
outPlot <- ggplot(plotValues, aes(x=baseRate, y = precision, color = ageGroup)) +
geom_line(size = 5) +
geom_abline(slope = 1, intercept = 0, size = 2, linetype = 'dashed') +
geom_vline(xintercept = .0148, size = 2, linetype = 'longdash', color = 'red', alpha = .5) +
geom_vline(xintercept = .187, size = 2, linetype = 'longdash', color = 'red', alpha = .5) +
geom_vline(xintercept = .5, size = 2, linetype = 'longdash', color = 'red', alpha = .5) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20),
panel.grid.major = element_line(color = "grey",
size = 2,
linetype = 2)) +
ylab('precision') +
ggtitle(paste('posterior probability', sep = ''))
png(paste(figPath, 'precision_all',predNames[vari],'_', agei, '.png', sep = ''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
outPlot <- ggplot(plotValues, aes(x=baseRate, y = infoGain, color = ageGroup)) +
geom_point(size = 5) +
geom_vline(xintercept = .0148, size = 2, linetype = 'longdash', color = 'red', alpha = .5) +
geom_vline(xintercept = .187, size = 2, linetype = 'longdash', color = 'red', alpha = .5) +
geom_vline(xintercept = .5, size = 2, linetype = 'longdash', color = 'red', alpha = .5) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20),
panel.grid.major = element_line(color = "grey",
size = 2,
linetype = 2)) +
ylim(c(0,.3)) +
ylab('information gain') +
ggtitle(paste('information gain', sep = ''))
png(paste(figPath, 'infoGain_all',predNames[vari],'_', agei, '.png', sep = ''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
breakPoints =  c(.1, 1, 10, 100, 1000)
outPlot <- ggplot(plotValues, aes(x=baseRate, y = FPi, color = ageGroup)) +
geom_line(size = 5) +
geom_vline(xintercept = .0148, size = 2, linetype = 'longdash', color = 'red', alpha = .5) +
geom_vline(xintercept = .187, size = 2, linetype = 'longdash', color = 'red', alpha = .5) +
geom_vline(xintercept = .5, size = 2, linetype = 'longdash', color = 'red', alpha = .5) +
scale_y_log10(breaks = breakPoints, limits = c(.1,1000)) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20),
panel.grid.major = element_line(color = "grey",
size = 2,
linetype = 2)) +
ylab('count FP / count TP') +
xlim(c(0,.5))+
ggtitle(paste('false positive index', sep = ''))
png(paste(figPath, 'FPi_all',predNames[vari],'_', agei, '.png', sep = ''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
