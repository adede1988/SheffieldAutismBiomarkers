#hard code the age groups
ageGroups = c(0,97,127,999)
#### randomization code written on 29/11/2022 and run one time
#see helperFuncs.R for code specifications
#### end randomization block ####
# dat = read.csv(paste(path, "testSet.csv", sep= ''))
#
# dat <- dat %>% select(-X)
varNames = names(dat)[20:1179]
test <- read.csv(paste(path, "autismBiomarkersAllData3.csv", sep = ''))
test$nbChanOrig[test$nbChanOrig==999] = 124 #due to a data import error, less than 10 participants had their nbChanOrig values missing
dat <- filter(test, group %in% c('CON', 'AD', 'ASD'), eyes == 'open')
#AD subjects above and below 250 months of age
sum(dat$group=='AD' & dat$age > 250)
sum(dat$group=='AD' & dat$age <= 250)
dat <- filter(dat, age<=250)
dat <- filter(dat, nbChanOrig>20)
dat <- filter(dat, nbChanFinal/nbChanOrig >= .5)
# ageGroups = c(0, 999999) #use this to test what happens if all included in one!
# varNames = varNames[randsample(length(varNames),30)]
#run stats on the full dataset
results <- getResults(dat, varNames, ageGroups)
dat <- results[[2]]
results <- results[[1]]
repeats = 150
savePath = "R:\\MSS\\Johnson_Lab\\dtf8829\\GitHub\\SheffieldAutismBiomarkers\\bootstrapAnalysis\\"
#what's the stability of the large effect sizes for diagnosis?
if(!file.exists(paste(savePath, "Diag_stab.csv", sep = ''))){
test <- results %>% filter(Diag > .035)
stabilityMat <- matrix(0, nrow = repeats, ncol = length(test$dependentVariable))
stabilityMat <- as.data.frame(stabilityMat)
names(stabilityMat) <- test$dependentVariable
lookup <- paste(test$dependentVariable, test$ageGroup)
for(ii in 1:repeats){
print(ii)
tmpDat = randomSplit(dat, ageGroups)
tmpRes1 <- getResults(tmpDat[[1]], test$dependentVariable, ageGroups)
tmpRes1 <- tmpRes1[[1]]
screen = paste(tmpRes1$dependentVariable, tmpRes1$ageGroup)
tmpRes1 <- tmpRes1[screen %in% lookup, ]
tmpRes2 <- getResults(tmpDat[[2]], test$dependentVariable, ageGroups)
tmpRes2 <- tmpRes2[[1]]
tmpRes2 <- tmpRes2[screen %in% lookup, ]
stabilityMat[ii,] <- tmpRes1$Diag>.035 & tmpRes2$Diag>.035
}
stabilityMat_Diag <- stabilityMat
write.csv(stabilityMat_Diag,
paste(savePath, "Diag_stab.csv", sep = ''))
} else {
stabilityMat <- read.csv(paste(savePath, "Diag_stab.csv", sep = ''))
stabilityMat <- stabilityMat %>% select(-X)
}
stabilityMat_Diag <- stabilityMat
#diag X age
if(!file.exists(paste(savePath, "Diag_Age_stab.csv", sep = ''))){
test <- results %>% filter(Diag_Age > .035)
stabilityMat <- matrix(0, nrow = repeats, ncol = length(test$dependentVariable))
stabilityMat <- as.data.frame(stabilityMat)
names(stabilityMat) <- test$dependentVariable
lookup <- paste(test$dependentVariable, test$ageGroup)
for(ii in 1:repeats){
print(ii)
tmpDat = randomSplit(dat, ageGroups)
tmpRes1 <- getResults(tmpDat[[1]], test$dependentVariable, ageGroups)
tmpRes1 <- tmpRes1[[1]]
screen = paste(tmpRes1$dependentVariable, tmpRes1$ageGroup)
tmpRes1 <- tmpRes1[screen %in% lookup, ]
tmpRes2 <- getResults(tmpDat[[2]], test$dependentVariable, ageGroups)
tmpRes2 <- tmpRes2[[1]]
tmpRes2 <- tmpRes2[screen %in% lookup, ]
stabilityMat[ii,] <- tmpRes1$Diag_Age>.035 & tmpRes2$Diag_Age>.035
}
stabilityMat_Diag_Age <- stabilityMat
write.csv(stabilityMat_Diag_Age,
paste(savePath, "Diag_Age_stab.csv", sep = ''))
}else{
stabilityMat <- read.csv(paste(savePath, "Diag_Age_stab.csv", sep = ''))
stabilityMat <- stabilityMat %>% select(-X)
}
stabilityMat_Diag_Age <- stabilityMat
#diag X sex
if(!file.exists(paste(savePath, "Diag_Sex_stab.csv", sep = ''))){
test <- results %>% filter(Diag_Sex > .035)
stabilityMat <- matrix(0, nrow = repeats, ncol = length(test$dependentVariable))
stabilityMat <- as.data.frame(stabilityMat)
names(stabilityMat) <- test$dependentVariable
lookup <- paste(test$dependentVariable, test$ageGroup)
for(ii in 1:repeats){
print(ii)
tmpDat = randomSplit(dat, ageGroups)
tmpRes1 <- getResults(tmpDat[[1]], test$dependentVariable, ageGroups)
tmpRes1 <- tmpRes1[[1]]
screen = paste(tmpRes1$dependentVariable, tmpRes1$ageGroup)
tmpRes1 <- tmpRes1[screen %in% lookup, ]
tmpRes2 <- getResults(tmpDat[[2]], test$dependentVariable, ageGroups)
tmpRes2 <- tmpRes2[[1]]
tmpRes2 <- tmpRes2[screen %in% lookup, ]
stabilityMat[ii,] <- tmpRes1$Diag_Sex>.035 & tmpRes2$Diag_Sex>.035
}
write.csv(stabilityMat, paste(savePath, "Diag_Sex_stab.csv", sep = ''))
} else {
stabilityMat <- read.csv(paste(savePath, "Diag_Sex_stab.csv", sep = ''))
stabilityMat <- stabilityMat %>% select(-X)
}
stabilityMat_Diag_Sex <- stabilityMat
#diag X sex X age
if(!file.exists(paste(savePath, "Diag_Age_Sex_stab.csv", sep = ''))){
test <- results %>% filter(Diag_Age_Sex > .035)
stabilityMat <- matrix(0, nrow = repeats, ncol = length(test$dependentVariable))
stabilityMat <- as.data.frame(stabilityMat)
names(stabilityMat) <- test$dependentVariable
lookup <- paste(test$dependentVariable, test$ageGroup)
for(ii in 1:repeats){
print(ii)
tmpDat = randomSplit(dat, ageGroups)
tmpRes1 <- getResults(tmpDat[[1]], test$dependentVariable, ageGroups)
tmpRes1 <- tmpRes1[[1]]
screen = paste(tmpRes1$dependentVariable, tmpRes1$ageGroup)
tmpRes1 <- tmpRes1[screen %in% lookup, ]
tmpRes2 <- getResults(tmpDat[[2]], test$dependentVariable, ageGroups)
tmpRes2 <- tmpRes2[[1]]
tmpRes2 <- tmpRes2[screen %in% lookup, ]
stabilityMat[ii,] <- tmpRes1$Diag_Age_Sex>.035 & tmpRes2$Diag_Age_Sex>.035
}
write.csv(stabilityMat, paste(savePath, "Diag_Age_Sex_stab.csv", sep = ''))
} else {
stabilityMat <- read.csv(paste(savePath, "Diag_Age_Sex_stab.csv", sep = ''))
stabilityMat <- stabilityMat %>% select(-X)
}
stabilityMat_Diag_Age_Sex <- stabilityMat
#age
if(!file.exists(paste(savePath, "Age_stab.csv", sep = ''))){
test <- results %>% filter(age > .035 & age<.06)
stabilityMat <- matrix(0, nrow = repeats, ncol = length(test$dependentVariable))
stabilityMat <- as.data.frame(stabilityMat)
names(stabilityMat) <- test$dependentVariable
lookup <- paste(test$dependentVariable, test$ageGroup)
for(ii in 1:repeats){
print(ii)
tmpDat = randomSplit(dat, ageGroups)
tmpRes1 <- getResults(tmpDat[[1]], test$dependentVariable, ageGroups)
tmpRes1 <- tmpRes1[[1]]
screen = paste(tmpRes1$dependentVariable, tmpRes1$ageGroup)
tmpRes1 <- tmpRes1[screen %in% lookup, ]
tmpRes2 <- getResults(tmpDat[[2]], test$dependentVariable, ageGroups)
tmpRes2 <- tmpRes2[[1]]
tmpRes2 <- tmpRes2[screen %in% lookup, ]
stabilityMat[ii,] <- tmpRes1$age>.035 & tmpRes2$age>.035
}
write.csv(stabilityMat, paste(savePath, "Age_stab.csv", sep = ''))
} else {
stabilityMat <- read.csv(paste(savePath, "Age_stab.csv", sep = ''))
stabilityMat <- stabilityMat %>% select(-X)
}
stabilityMat_Age <- stabilityMat
#sex
if(!file.exists(paste(savePath, "Sex_stab.csv", sep = ''))){
test <- results %>% filter(sex > .035 & sex<.06)
stabilityMat <- matrix(0, nrow = repeats, ncol = length(test$dependentVariable))
stabilityMat <- as.data.frame(stabilityMat)
names(stabilityMat) <- test$dependentVariable
lookup <- paste(test$dependentVariable, test$ageGroup)
for(ii in 1:repeats){
print(ii)
tmpDat = randomSplit(dat, ageGroups)
tmpRes1 <- getResults(tmpDat[[1]], test$dependentVariable, ageGroups)
tmpRes1 <- tmpRes1[[1]]
screen = paste(tmpRes1$dependentVariable, tmpRes1$ageGroup)
tmpRes1 <- tmpRes1[screen %in% lookup, ]
tmpRes2 <- getResults(tmpDat[[2]], test$dependentVariable, ageGroups)
tmpRes2 <- tmpRes2[[1]]
tmpRes2 <- tmpRes2[screen %in% lookup, ]
stabilityMat[ii,] <- tmpRes1$sex>.035 & tmpRes2$sex>.035
}
write.csv(stabilityMat, paste(savePath, "Sex_stab.csv", sep = ''))
} else {
stabilityMat <- read.csv(paste(savePath, "Sex_stab.csv", sep = ''))
stabilityMat <- stabilityMat %>% select(-X)
}
stabilityMat_Sex <- stabilityMat
#age high
if(!file.exists(paste(savePath, "AgeHigh_stab.csv", sep = ''))){
test <- results %>% filter(age>.06)
stabilityMat <- matrix(0, nrow = repeats, ncol = length(test$dependentVariable))
stabilityMat <- as.data.frame(stabilityMat)
names(stabilityMat) <- test$dependentVariable
lookup <- paste(test$dependentVariable, test$ageGroup)
for(ii in 1:repeats){
print(ii)
tmpDat = randomSplit(dat, ageGroups)
tmpRes1 <- getResults(tmpDat[[1]], test$dependentVariable, ageGroups)
tmpRes1 <- tmpRes1[[1]]
screen = paste(tmpRes1$dependentVariable, tmpRes1$ageGroup)
tmpRes1 <- tmpRes1[screen %in% lookup, ]
tmpRes2 <- getResults(tmpDat[[2]], test$dependentVariable, ageGroups)
tmpRes2 <- tmpRes2[[1]]
tmpRes2 <- tmpRes2[screen %in% lookup, ]
stabilityMat[ii,] <- tmpRes1$age>.035 & tmpRes2$age>.035
}
write.csv(stabilityMat, paste(savePath, "AgeHigh_stab.csv", sep = ''))
} else {
stabilityMat <- read.csv(paste(savePath, "AgeHigh_stab.csv", sep = ''))
stabilityMat <- stabilityMat %>% select(-X)
}
stabilityMat_AgeHigh <- stabilityMat
#sex high
if(!file.exists(paste(savePath, "SexHigh_stab.csv", sep = ''))){
test <- results %>% filter(sex>.06)
stabilityMat <- matrix(0, nrow = repeats, ncol = length(test$dependentVariable))
stabilityMat <- as.data.frame(stabilityMat)
names(stabilityMat) <- test$dependentVariable
lookup <- paste(test$dependentVariable, test$ageGroup)
for(ii in 1:repeats){
print(ii)
tmpDat = randomSplit(dat, ageGroups)
tmpRes1 <- getResults(tmpDat[[1]], test$dependentVariable, ageGroups)
tmpRes1 <- tmpRes1[[1]]
screen = paste(tmpRes1$dependentVariable, tmpRes1$ageGroup)
tmpRes1 <- tmpRes1[screen %in% lookup, ]
tmpRes2 <- getResults(tmpDat[[2]], test$dependentVariable, ageGroups)
tmpRes2 <- tmpRes2[[1]]
tmpRes2 <- tmpRes2[screen %in% lookup, ]
stabilityMat[ii,] <- tmpRes1$sex>.035 & tmpRes2$sex>.035
}
write.csv(stabilityMat, paste(savePath, "SexHigh_stab.csv", sep = ''))
} else {
stabilityMat <- read.csv(paste(savePath, "SexHigh_stab.csv", sep = ''))
stabilityMat <- stabilityMat %>% select(-X)
}
stabilityMat_SexHigh <- stabilityMat
results$Diag_stab <- NA
results$Diag_stab[which(results$Diag>.035)] <- colMeans(stabilityMat_Diag)
results$Diag_Age_stab <- NA
results$Diag_Age_stab[which(results$Diag_Age>.035)] <- colMeans(stabilityMat_Diag_Age)
results$Diag_Sex_stab <- NA
results$Diag_Sex_stab[which(results$Diag_Sex>.035)] <- colMeans(stabilityMat_Diag_Sex)
results$Diag_Age_Sex_stab <- NA
results$Diag_Age_Sex_stab[which(results$Diag_Age_Sex>.035)] <- colMeans(stabilityMat_Diag_Age_Sex)
results$Age_stab <- NA
results$Age_stab[which(results$age>.035 & results$age<.06)] <- colMeans(stabilityMat_Age)
results$AgeHigh_stab <- NA
results$AgeHigh_stab[which(results$age>.06 )] <- colMeans(stabilityMat_AgeHigh)
results$Age_stab[which(results$age>.06 )] <- colMeans(stabilityMat_AgeHigh)
results$Sex_stab <- NA
results$Sex_stab[which(results$sex>.035 & results$sex<.06)] <- colMeans(stabilityMat_Sex)
results$SexHigh_stab <- NA
results$SexHigh_stab[which(results$sex>.06)] <- colMeans(stabilityMat_SexHigh)
results$Sex_stab[which(results$sex>.06)] <- colMeans(stabilityMat_SexHigh)
sum(results$nonLin<.05) / length(results$nonLin)
results %>% group_by(type, ageGroup) %>% summarize(nonLinCount = sum(nonLin<.05)/length(nonLin))
test <- results %>% filter(Diag > .05)
results %>% ggplot(aes(x = Diag, y = DiagBinom, color = ageGroup)) +
geom_jitter() +
geom_abline(intercept = .05, slope = 0) +
geom_vline(xintercept = .05)
results %>% ggplot(aes(x = Diag, y = Diag_resid, color = as.factor(ageGroup))) +
geom_jitter() +
geom_vline(xintercept = .05)
results %>% ggplot(aes(x = Diag, y = Diag_resid, color = as.factor(ageGroup))) +
geom_jitter() +
geom_vline(xintercept = .05)
predNames = c('age', 'sex', 'IQ', 'Diag', 'Diag_Age', 'Diag_Sex', 'Diag_Age_Sex')
stabNames = c('Diag_stab', 'Diag_Age_stab', 'Diag_Sex_stab', 'Diag_Age_Sex_stab',
'Age_stab', 'AgeHigh_stab', 'Sex_stab', 'SexHigh_stab')
# stabNames = c('Diag_stab', 'Diag_Age_stab', 'Diag_Sex_stab', 'Diag_Age_Sex_stab',
#               'Age_stab',  'Sex_stab', 'SexHigh_stab')
ageLabs = c(paste(as.character(min(filter(dat, age>ageGroups[1] & age<ageGroups[2])$age)), '-',
as.character(max(filter(dat, age>ageGroups[1] & age<ageGroups[2])$age)),
' months', sep = ''),
paste(as.character(min(filter(dat, age>ageGroups[2] & age<ageGroups[3])$age)), '-',
as.character(max(filter(dat, age>ageGroups[2] & age<ageGroups[3])$age)),
' months', sep = ''),
paste(as.character(min(filter(dat, age>ageGroups[3] & age<ageGroups[4])$age)), '-',
as.character(max(filter(dat, age>ageGroups[3] & age<ageGroups[4])$age)),
' months', sep = ''))
names(ageLabs) <- c('1', '2', '3')
myColors = c('#F22F29','#CD4D5D', '#FB9564', '#4ED6B2','#2C64C0', '#1B47A5',    '#7B5C52')
ageColors = c('#551956', '#91a250', '#cc99cc')
names(myColors) <- levels(factor(results$type))
colScale <- scale_color_manual(name = "type",values = myColors)
fillScale <- scale_fill_manual(name = "type",values = myColors)
theme_set(theme_gray(base_size = 30))
results$ageGroup = as.factor(results$ageGroup)
dat$ageGroup = 1
dat$ageGroup[dat$age>ageGroups[2]] = 2
dat$ageGroup[dat$age>ageGroups[3]] = 3
dat$ageGroup = as.factor(dat$ageGroup)
test <- results %>% filter(Diag_Sex>.035, Diag_Sex_stab > .64)
library(tidyverse)
# Set your folder path
folder_path <- "R:\\MSS\\Johnson_Lab\\dtf8829\\GitHub\\AB_pic_analysis\\memPerData"
# Get a list of all CSV files in the folder
csv_files <- list.files(path = folder_path, pattern = "\\.csv$", full.names = TRUE)
# Initialize an empty list to store dataframes
allDat <- list()
# Import each CSV file into a dataframe and store it in the list
for (file in csv_files) {
df_name <- gsub("\\.csv", "", basename(file)) # Extract dataframe name from file name
allDat[[df_name]] <- read.csv(file)
}
summaryDat = data.frame('subNum' = rep(0,length(allDat)),
'date' = rep(0,length(allDat)))
lagVals = c(1,5)
T1p = c(1,0)
T2p = c(1,0)
conditions <- expand.grid(lagVals, T1p, T2p)
names(conditions) <- c('lag', 'T1', 'T2')
keys = c("left", "right")
ii = 1
curDat = allDat[[ii]]
summaryDat$subNum[ii] = curDat$PROLIFIC_PID[1]
View(curDat)
unique(curDat$TrialType)
memBlock = curDat %>% filter(TrialType == "3_AB")
View(memBlock)
expand.grid(lagVals, T1p, T2p)
memBlock$T1cor[memBlock$T1_PA==1, ] = memBlock$key_resp_2.keys == 'right'
memBlock$T1_PA==1
memBlock$T2_PA==1
memBlock$T1cor[memBlock$T1_PA==1] = memBlock$key_resp_2.keys == 'right'
memBlock$T2cor[memBlock$T2_PA==1] = memBlock$key_resp_3.keys == 'right'
memBlock$T1cor[memBlock$T1_PA==0] = memBlock$key_resp_2.keys == 'left'
memBlock$T2cor[memBlock$T2_PA==0] = memBlock$key_resp_3.keys == 'left'
memBlock$T1cor[memBlock$T1_PA==1] = memBlock$key_resp_2.keys[memBlock$T1_PA==1] == 'right'
memBlock$T2cor[memBlock$T2_PA==1] = memBlock$key_resp_3.keys[memBlock$T2_PA==1] == 'right'
memBlock$T1cor[memBlock$T1_PA==0] = memBlock$key_resp_2.keys[memBlock$T1_PA==0] == 'left'
memBlock$T2cor[memBlock$T2_PA==0] = memBlock$key_resp_3.keys[memBlock$T2_PA==0] == 'left'
View(memBlock)
dim(memBlock)[2]
dim(memBlock)[1]
runningTotal = 0
for(tt in 1:dim(memBlock)[1]){
T1Key = memBlock$key_resp_2.keys[TT]
if(memBlock$T1_PA[tt]==1){
if(T1Key == 'right'){
runningTotal = runningTotal + 1
}else{
runningTotal = runningTotal - 1
}
}else{
if(T1Key == 'right'){
runningTotal = runningTotal - 2
}else{
runningTotal = runningTotal + 1
}
}
T2Key = memBlock$key_resp_3.keys[TT]
if(memBlock$T2_PA[tt]==1){
if(T2Key == 'right'){
runningTotal = runningTotal + 1
}else{
runningTotal = runningTotal - 1
}
}else{
if(T2Key == 'right'){
runningTotal = runningTotal - 2
}else{
runningTotal = runningTotal + 1
}
}
}
for(TT in 1:dim(memBlock)[1]){
T1Key = memBlock$key_resp_2.keys[TT]
if(memBlock$T1_PA[tt]==1){
if(T1Key == 'right'){
runningTotal = runningTotal + 1
}else{
runningTotal = runningTotal - 1
}
}else{
if(T1Key == 'right'){
runningTotal = runningTotal - 2
}else{
runningTotal = runningTotal + 1
}
}
T2Key = memBlock$key_resp_3.keys[TT]
if(memBlock$T2_PA[tt]==1){
if(T2Key == 'right'){
runningTotal = runningTotal + 1
}else{
runningTotal = runningTotal - 1
}
}else{
if(T2Key == 'right'){
runningTotal = runningTotal - 2
}else{
runningTotal = runningTotal + 1
}
}
}
Block = curDat %>% filter(TrialType == "4_AB")
runningTotal = 0
for(TT in 1:dim(Block)[1]){
T1Key = Block$key_resp_2.keys[TT]
if(Block$T1_PA[tt]==1){
if(T1Key == 'right'){
runningTotal = runningTotal + 1
}else{
runningTotal = runningTotal - 1
}
}else{
if(T1Key == 'right'){
runningTotal = runningTotal - 2
}else{
runningTotal = runningTotal + 1
}
}
T2Key = Block$key_resp_3.keys[TT]
if(Block$T2_PA[tt]==1){
if(T2Key == 'right'){
runningTotal = runningTotal + 1
}else{
runningTotal = runningTotal - 1
}
}else{
if(T2Key == 'right'){
runningTotal = runningTotal - 2
}else{
runningTotal = runningTotal + 1
}
}
}
summaryDat[ii, 'perBlockABpoints'] = runningTotal
source("R:/MSS/Johnson_Lab/dtf8829/GitHub/AB_pic_analysis/scratch.R")
View(summaryDat)
summaryDat$memBlockABpoints
summaryDat$perBlockABpoints
unique(curDat$TrialType)
Block = curDat %>% filter(TrialType = "3_MEM")
Block = curDat %>% filter(TrialType == "3_MEM")
View(Block)
names(memBlock)
View(Block)
runningTotal = 0
newPoints = c(3,2,1,-2,-4, -6)
for(TT in 1:dim(Block)[1]){
if(Block$CondType[TT] == "old"){
runningTotal = runningTotal + Block$key_resp_4.keys - 3
} else {
runningTotal = runningTotal + newPoints[Block$key_resp_4.keys]
}
}
runningTotal = 0
newPoints = c(3,2,1,-2,-4, -6)
for(TT in 1:dim(Block)[1]){
if(Block$CondType[TT] == "old"){
runningTotal = runningTotal + Block$key_resp_4.keys[TT] - 3
} else {
runningTotal = runningTotal + newPoints[Block$key_resp_4.keys[TT]]
}
}
source("R:/MSS/Johnson_Lab/dtf8829/GitHub/AB_pic_analysis/scratch.R")
summaryDat %>% select(memPoints, perBlockABpoints, memBlockABpoints)
unique(curDat$TrialType)
Block = curDat %>% filter(TrialType == "prac_AB")
runningTotal = 0
for(TT in 1:dim(Block)[1]){
T1Key = Block$key_resp_2.keys[TT]
if(Block$T1_PA[tt]==1){
if(T1Key == 'right'){
runningTotal = runningTotal + 1
}else{
runningTotal = runningTotal - 1
}
}else{
if(T1Key == 'right'){
runningTotal = runningTotal - 2
}else{
runningTotal = runningTotal + 1
}
}
T2Key = Block$key_resp_3.keys[TT]
if(Block$T2_PA[tt]==1){
if(T2Key == 'right'){
runningTotal = runningTotal + 1
}else{
runningTotal = runningTotal - 1
}
}else{
if(T2Key == 'right'){
runningTotal = runningTotal - 2
}else{
runningTotal = runningTotal + 1
}
}
}
source("R:/MSS/Johnson_Lab/dtf8829/GitHub/AB_pic_analysis/scratch.R")
Block = curDat %>% filter(TrialType == "prac_AB")
Block$T1_PA
Block$T2_PA
source("R:/MSS/Johnson_Lab/dtf8829/GitHub/AB_pic_analysis/scratch.R")
Block = Block[15:,]
Block = Block[15:28,]
unique(curDat$TrialType)
source("R:/MSS/Johnson_Lab/dtf8829/GitHub/AB_pic_analysis/scratch.R")
summaryDat %>% select(memBlockABpoints, PRACmemPoints, memPoints, pracBlockABpoints, perBlockABpoints)
Block = curDat %>% filter(TrialType == "3_MEM")
70/62
20/14
62*1.428571
100/62
source("R:/MSS/Johnson_Lab/dtf8829/GitHub/AB_pic_analysis/scratch.R")
summaryDat %>% select(memBlockABpoints, PRACmemPoints, memPoints, pracBlockABpoints, perBlockABpoints)
Block = curDat %>% filter(TrialType == "3_MEM")
source("R:/MSS/Johnson_Lab/dtf8829/GitHub/AB_pic_analysis/scratch.R")
summaryDat %>% select(memBlockABpoints, PRACmemPoints, memPoints, pracBlockABpoints, perBlockABpoints)
90/62
Block = curDat %>% filter(TrialType == "3_MEM")
90/51
20*1.451613
14*1.451613
