results$ageGroup = as.factor(results$ageGroup)
dat$ageGroup = 1
dat$ageGroup[dat$age>ageGroups[2]] = 2
dat$ageGroup[dat$age>ageGroups[3]] = 3
dat$ageGroup = as.factor(dat$ageGroup)
test <- results %>% filter(Diag_Sex>.035, Diag_Sex_stab > .64)
library(tidyverse)
# Set your folder path
folder_path <- "R:\\MSS\\Johnson_Lab\\dtf8829\\GitHub\\AB_pic_analysis\\memPerData"
# Get a list of all CSV files in the folder
csv_files <- list.files(path = folder_path, pattern = "\\.csv$", full.names = TRUE)
# Initialize an empty list to store dataframes
allDat <- list()
# Import each CSV file into a dataframe and store it in the list
for (file in csv_files) {
df_name <- gsub("\\.csv", "", basename(file)) # Extract dataframe name from file name
allDat[[df_name]] <- read.csv(file)
}
summaryDat = data.frame('subNum' = rep(0,length(allDat)),
'date' = rep(0,length(allDat)))
lagVals = c(1,5)
T1p = c(1,0)
T2p = c(1,0)
conditions <- expand.grid(lagVals, T1p, T2p)
names(conditions) <- c('lag', 'T1', 'T2')
keys = c("left", "right")
ii = 1
curDat = allDat[[ii]]
summaryDat$subNum[ii] = curDat$PROLIFIC_PID[1]
View(curDat)
unique(curDat$TrialType)
memBlock = curDat %>% filter(TrialType == "3_AB")
View(memBlock)
expand.grid(lagVals, T1p, T2p)
memBlock$T1cor[memBlock$T1_PA==1, ] = memBlock$key_resp_2.keys == 'right'
memBlock$T1_PA==1
memBlock$T2_PA==1
memBlock$T1cor[memBlock$T1_PA==1] = memBlock$key_resp_2.keys == 'right'
memBlock$T2cor[memBlock$T2_PA==1] = memBlock$key_resp_3.keys == 'right'
memBlock$T1cor[memBlock$T1_PA==0] = memBlock$key_resp_2.keys == 'left'
memBlock$T2cor[memBlock$T2_PA==0] = memBlock$key_resp_3.keys == 'left'
memBlock$T1cor[memBlock$T1_PA==1] = memBlock$key_resp_2.keys[memBlock$T1_PA==1] == 'right'
memBlock$T2cor[memBlock$T2_PA==1] = memBlock$key_resp_3.keys[memBlock$T2_PA==1] == 'right'
memBlock$T1cor[memBlock$T1_PA==0] = memBlock$key_resp_2.keys[memBlock$T1_PA==0] == 'left'
memBlock$T2cor[memBlock$T2_PA==0] = memBlock$key_resp_3.keys[memBlock$T2_PA==0] == 'left'
View(memBlock)
dim(memBlock)[2]
dim(memBlock)[1]
runningTotal = 0
for(tt in 1:dim(memBlock)[1]){
T1Key = memBlock$key_resp_2.keys[TT]
if(memBlock$T1_PA[tt]==1){
if(T1Key == 'right'){
runningTotal = runningTotal + 1
}else{
runningTotal = runningTotal - 1
}
}else{
if(T1Key == 'right'){
runningTotal = runningTotal - 2
}else{
runningTotal = runningTotal + 1
}
}
T2Key = memBlock$key_resp_3.keys[TT]
if(memBlock$T2_PA[tt]==1){
if(T2Key == 'right'){
runningTotal = runningTotal + 1
}else{
runningTotal = runningTotal - 1
}
}else{
if(T2Key == 'right'){
runningTotal = runningTotal - 2
}else{
runningTotal = runningTotal + 1
}
}
}
for(TT in 1:dim(memBlock)[1]){
T1Key = memBlock$key_resp_2.keys[TT]
if(memBlock$T1_PA[tt]==1){
if(T1Key == 'right'){
runningTotal = runningTotal + 1
}else{
runningTotal = runningTotal - 1
}
}else{
if(T1Key == 'right'){
runningTotal = runningTotal - 2
}else{
runningTotal = runningTotal + 1
}
}
T2Key = memBlock$key_resp_3.keys[TT]
if(memBlock$T2_PA[tt]==1){
if(T2Key == 'right'){
runningTotal = runningTotal + 1
}else{
runningTotal = runningTotal - 1
}
}else{
if(T2Key == 'right'){
runningTotal = runningTotal - 2
}else{
runningTotal = runningTotal + 1
}
}
}
Block = curDat %>% filter(TrialType == "4_AB")
runningTotal = 0
for(TT in 1:dim(Block)[1]){
T1Key = Block$key_resp_2.keys[TT]
if(Block$T1_PA[tt]==1){
if(T1Key == 'right'){
runningTotal = runningTotal + 1
}else{
runningTotal = runningTotal - 1
}
}else{
if(T1Key == 'right'){
runningTotal = runningTotal - 2
}else{
runningTotal = runningTotal + 1
}
}
T2Key = Block$key_resp_3.keys[TT]
if(Block$T2_PA[tt]==1){
if(T2Key == 'right'){
runningTotal = runningTotal + 1
}else{
runningTotal = runningTotal - 1
}
}else{
if(T2Key == 'right'){
runningTotal = runningTotal - 2
}else{
runningTotal = runningTotal + 1
}
}
}
summaryDat[ii, 'perBlockABpoints'] = runningTotal
source("R:/MSS/Johnson_Lab/dtf8829/GitHub/AB_pic_analysis/scratch.R")
View(summaryDat)
summaryDat$memBlockABpoints
summaryDat$perBlockABpoints
unique(curDat$TrialType)
Block = curDat %>% filter(TrialType = "3_MEM")
Block = curDat %>% filter(TrialType == "3_MEM")
View(Block)
names(memBlock)
View(Block)
runningTotal = 0
newPoints = c(3,2,1,-2,-4, -6)
for(TT in 1:dim(Block)[1]){
if(Block$CondType[TT] == "old"){
runningTotal = runningTotal + Block$key_resp_4.keys - 3
} else {
runningTotal = runningTotal + newPoints[Block$key_resp_4.keys]
}
}
runningTotal = 0
newPoints = c(3,2,1,-2,-4, -6)
for(TT in 1:dim(Block)[1]){
if(Block$CondType[TT] == "old"){
runningTotal = runningTotal + Block$key_resp_4.keys[TT] - 3
} else {
runningTotal = runningTotal + newPoints[Block$key_resp_4.keys[TT]]
}
}
source("R:/MSS/Johnson_Lab/dtf8829/GitHub/AB_pic_analysis/scratch.R")
summaryDat %>% select(memPoints, perBlockABpoints, memBlockABpoints)
unique(curDat$TrialType)
Block = curDat %>% filter(TrialType == "prac_AB")
runningTotal = 0
for(TT in 1:dim(Block)[1]){
T1Key = Block$key_resp_2.keys[TT]
if(Block$T1_PA[tt]==1){
if(T1Key == 'right'){
runningTotal = runningTotal + 1
}else{
runningTotal = runningTotal - 1
}
}else{
if(T1Key == 'right'){
runningTotal = runningTotal - 2
}else{
runningTotal = runningTotal + 1
}
}
T2Key = Block$key_resp_3.keys[TT]
if(Block$T2_PA[tt]==1){
if(T2Key == 'right'){
runningTotal = runningTotal + 1
}else{
runningTotal = runningTotal - 1
}
}else{
if(T2Key == 'right'){
runningTotal = runningTotal - 2
}else{
runningTotal = runningTotal + 1
}
}
}
source("R:/MSS/Johnson_Lab/dtf8829/GitHub/AB_pic_analysis/scratch.R")
Block = curDat %>% filter(TrialType == "prac_AB")
Block$T1_PA
Block$T2_PA
source("R:/MSS/Johnson_Lab/dtf8829/GitHub/AB_pic_analysis/scratch.R")
Block = Block[15:,]
Block = Block[15:28,]
unique(curDat$TrialType)
source("R:/MSS/Johnson_Lab/dtf8829/GitHub/AB_pic_analysis/scratch.R")
summaryDat %>% select(memBlockABpoints, PRACmemPoints, memPoints, pracBlockABpoints, perBlockABpoints)
Block = curDat %>% filter(TrialType == "3_MEM")
70/62
20/14
62*1.428571
100/62
source("R:/MSS/Johnson_Lab/dtf8829/GitHub/AB_pic_analysis/scratch.R")
summaryDat %>% select(memBlockABpoints, PRACmemPoints, memPoints, pracBlockABpoints, perBlockABpoints)
Block = curDat %>% filter(TrialType == "3_MEM")
source("R:/MSS/Johnson_Lab/dtf8829/GitHub/AB_pic_analysis/scratch.R")
summaryDat %>% select(memBlockABpoints, PRACmemPoints, memPoints, pracBlockABpoints, perBlockABpoints)
90/62
Block = curDat %>% filter(TrialType == "3_MEM")
90/51
20*1.451613
14*1.451613
library(lmtest)
library(lsr)
library(tidyverse)
library(car)
library(circular)
library(kableExtra)
library(pracma)
library(glmtoolbox)
source('G:\\My Drive\\GitHub/SheffieldAutismBiomarkers/helperFuncsFinal.R')
## set path to github repo on local machine here:
path = "G:\\My Drive\\GitHub\\SheffieldAutismBiomarkers\\"
# path = "C:\\Users\\Adam Dede\\Documents\\GitHub\\SheffieldAutismBiomarkers\\"
figPath = "G:\\My Drive\\Milne\\pubFigPanels\\"
test <- read.csv(paste(path, "autismBiomarkersAllData3.csv", sep = ''))
test$nbChanOrig[test$nbChanOrig==999] = 124 #due to a data import error, less than 10 participants had their nbChanOrig values missing
dat <- filter(test, group %in% c('CON', 'AD', 'ASD'), eyes == 'open')
#AD subjects above and below 250 months of age
sum(dat$group=='AD' & dat$age > 250)
sum(dat$group=='AD' & dat$age <= 250)
dat <- filter(dat, age<=250)
dat <- filter(dat, nbChanOrig>20)
dat <- filter(dat, nbChanFinal/nbChanOrig >= .5)
#9 subjects had missing IQ data! these subjects will have dataset/group appropriate means substituted in below
sum(is.na(dat$IQ))
#data description table:
makeDemoTable(dat)
#age group detection originally done with this code:
# ageGroups = quantile(filter(dat, group %in% c('AD', 'ASD'))$age , c(0,.33333,.666666,1.0))
# ageGroups[1]= 0
# ageGroups[4]=999
#hard code the age groups
ageGroups = c(0,97,127,999)
#### randomization code written on 29/11/2022
#see helperFuncs.R for code specifications
#### end randomization block ####
# dat = read.csv(paste(path, "testSet.csv", sep= ''))
#
# dat <- dat %>% select(-X)
varNames = names(dat)[20:1179]
test <- read.csv(paste(path, "autismBiomarkersAllData3.csv", sep = ''))
test$nbChanOrig[test$nbChanOrig==999] = 124 #due to a data import error, less than 10 participants had their nbChanOrig values missing
dat <- filter(test, group %in% c('CON', 'AD', 'ASD'), eyes == 'open')
#AD subjects above and below 250 months of age
sum(dat$group=='AD' & dat$age > 250)
sum(dat$group=='AD' & dat$age <= 250)
dat <- filter(dat, age<=250)
dat <- filter(dat, nbChanOrig>20)
dat <- filter(dat, nbChanFinal/nbChanOrig >= .5)
View(dat)
source("G:/My Drive/GitHub/MasterStatsUsingR/courseTheme.R")
var = varNames[30]
var
dat %>% ggplot(aes.string(x = 'age', y = var)) +
geom_point(size = 3, alpha = .2, color = 'green') + mytheme
dat %>% ggplot(aes_string(x = 'age', y = var)) +
geom_point(size = 3, alpha = .2, color = 'green') + mytheme
dat %>% ggplot(aes_string(x = 'age', y = var)) +
geom_point(size = 3, alpha = .2, color = 'green') + myTheme
dat %>% ggplot(aes_string(x = 'age', y = var)) +
geom_point(size = 3, alpha = .2, color = 'green') +
geom_smooth(method = "lm", formula = y ~ poly(x, 3), color = "red", se = FALSE)+
myTheme
dat %>% ggplot(aes_string(x = 'age', y = var)) +
geom_point(size = 3, alpha = .5, color = '#4ED6B2') +
geom_smooth(method = "lm", formula = y ~ poly(x, 3), color = "#FB9564", se = FALSE)+
myTheme
dat %>% ggplot(aes_string(x = 'age', y = var)) +
geom_point(size = 3, alpha = .5, color = '#4ED6B2') +
geom_smooth(method = "lm", formula = y ~ poly(x, 3),
linewidth = 3,
color = "#FB9564", se = FALSE)+
myTheme
test = lm(logPow_beta_lF ~ poly(age,3), data = dat)
summary(test)
test$coefficients
test$qr
test$effects
test = summary(test)
test$p_values <- summary(test)$coefficients[, "Pr(>|t|)"]
summary(test)$coefficients[, "Pr(>|t|)"]
test = lm(logPow_beta_lF ~ poly(age,3), data = dat)
test = lm(logPow_beta_lF ~ poly(age,3), data = dat)
summary(test)$coefficients[, "Pr(>|t|)"]
round(summary(test)$coefficients[, "Pr(>|t|)"], 2)
summary(test)$coefficients[3:4, "Pr(>|t|)"]
figPath = 'G:\My Drive\Milne\clusterDifferences\ageEffects'
figPath = 'G:\\My Drive\\Milne\\clusterDifferences\\ageEffects'
for( var in varNames){
test = lm(logPow_beta_lF ~ poly(age,3), data = dat)
if (sum(summary(test)$coefficients[3:4, "Pr(>|t|)"]<.05)>0){
png(paste(figPath, 'AgeScatter_', var, '.png',sep=''),         # File name
width=1024, height=768)
dat %>% ggplot(aes_string(x = 'age', y = var)) +
geom_point(size = 3, alpha = .5, color = '#4ED6B2') +
geom_smooth(method = "lm", formula = y ~ poly(x, 3),
linewidth = 3,
color = "#FB9564", se = FALSE)+
myTheme
dev.off()
}
}
print(var)
test = lm(logPow_beta_lF ~ poly(age,3), data = dat)
sum(summary(test)$coefficients[3:4, "Pr(>|t|)"]<.05)>0
paste(figPath, 'AgeScatter_', var, '.png',sep='')
figPath = 'G:\\My Drive\\Milne\\clusterDifferences\\ageEffects\\'
for( var in varNames){
print(var)
test = lm(logPow_beta_lF ~ poly(age,3), data = dat)
if (sum(summary(test)$coefficients[3:4, "Pr(>|t|)"]<.05)>0){
png(paste(figPath, 'AgeScatter_', var, '.png',sep=''),         # File name
width=1024, height=768)
dat %>% ggplot(aes_string(x = 'age', y = var)) +
geom_point(size = 3, alpha = .5, color = '#4ED6B2') +
geom_smooth(method = "lm", formula = y ~ poly(x, 3),
linewidth = 3,
color = "#FB9564", se = FALSE)+
myTheme
dev.off()
}
}
dat %>% ggplot(aes_string(x = 'age', y = var)) +
geom_point(size = 3, alpha = .5, color = '#4ED6B2') +
geom_smooth(method = "lm", formula = y ~ poly(x, 3),
linewidth = 3,
color = "#FB9564", se = FALSE)+
myTheme
var
dat %>% ggplot(aes_string(x = 'age', y = var)) +
geom_point(size = 3, alpha = .5, color = '#4ED6B2') +
geom_smooth(method = "lm", formula = y ~ poly(x, 3),
linewidth = 3,
color = "#FB9564", se = FALSE)+
myTheme
var
dat %>% ggplot(aes_string(x = 'age', y = var)) +
geom_point(size = 3, alpha = .5, color = '#4ED6B2')
dat[var]
plot(dat$age, dat[var])
dat$age
length(dat[var])
length(dat[,var])
length(dat['age'])
length(dat[,'age'])
print(var)
test = lm(logPow_beta_lF ~ poly(age,3), data = dat)
summary(test)
dat %>% ggplot(aes_string(x = 'age', y = var)) +
geom_point(size = 3, alpha = .5, color = '#4ED6B2') +
geom_smooth(method = "lm", formula = y ~ poly(x, 3),
linewidth = 3,
color = "#FB9564", se = FALSE)+
myTheme
var
dat %>% ggplot(aes(x = age, y = logPowAsym_theta_lML)) +
geom_point(size = 3, alpha = .5, color = '#4ED6B2') +
geom_smooth(method = "lm", formula = y ~ poly(x, 3),
linewidth = 3,
color = "#FB9564", se = FALSE)+
myTheme
dat %>% ggplot(aes(x = age, y = logPowAsym_theta_lML)) +
geom_point(size = 3, alpha = .5, color = '#4ED6B2')
x = dat$age
y = dat$logPowAsym_theta_lML
plot(x,y)
dev.off()
dev.off()
figPath = 'G:\\My Drive\\Milne\\clusterDifferences\\ageEffects\\'
for( var in varNames){
print(var)
test = lm(logPow_beta_lF ~ poly(age,3), data = dat)
if (sum(summary(test)$coefficients[3:4, "Pr(>|t|)"]<.05)>0){
png(paste(figPath, 'AgeScatter_', var, '.png',sep=''),         # File name
width=1024, height=768)
dat %>% ggplot(aes(x = age, y = logPowAsym_theta_lML)) +
geom_point(size = 3, alpha = .5, color = '#4ED6B2') +
geom_smooth(method = "lm", formula = y ~ poly(x, 3),
linewidth = 3,
color = "#FB9564", se = FALSE)+
myTheme
dev.off()
}
}
library(lmtest)
library(lsr)
library(tidyverse)
library(car)
library(circular)
library(kableExtra)
library(pracma)
library(glmtoolbox)
source('G:\\My Drive\\GitHub/SheffieldAutismBiomarkers/helperFuncsFinal.R')
## set path to github repo on local machine here:
path = "G:\\My Drive\\GitHub\\SheffieldAutismBiomarkers\\"
# path = "C:\\Users\\Adam Dede\\Documents\\GitHub\\SheffieldAutismBiomarkers\\"
figPath = "G:\\My Drive\\Milne\\pubFigPanels\\"
test <- read.csv(paste(path, "autismBiomarkersAllData3.csv", sep = ''))
test$nbChanOrig[test$nbChanOrig==999] = 124 #due to a data import error, less than 10 participants had their nbChanOrig values missing
dat <- filter(test, group %in% c('CON', 'AD', 'ASD'), eyes == 'open')
#AD subjects above and below 250 months of age
sum(dat$group=='AD' & dat$age > 250)
sum(dat$group=='AD' & dat$age <= 250)
dat <- filter(dat, age<=250)
dat <- filter(dat, nbChanOrig>20)
dat <- filter(dat, nbChanFinal/nbChanOrig >= .5)
#9 subjects had missing IQ data! these subjects will have dataset/group appropriate means substituted in below
sum(is.na(dat$IQ))
#data description table:
makeDemoTable(dat)
#age group detection originally done with this code:
# ageGroups = quantile(filter(dat, group %in% c('AD', 'ASD'))$age , c(0,.33333,.666666,1.0))
# ageGroups[1]= 0
# ageGroups[4]=999
#hard code the age groups
ageGroups = c(0,97,127,999)
#### end randomization block ####
# dat = read.csv(paste(path, "testSet.csv", sep= ''))
#
# dat <- dat %>% select(-X)
varNames = names(dat)[20:1179]
test <- read.csv(paste(path, "autismBiomarkersAllData3.csv", sep = ''))
test$nbChanOrig[test$nbChanOrig==999] = 124 #due to a data import error, less than 10 participants had their nbChanOrig values missing
dat <- filter(test, group %in% c('CON', 'AD', 'ASD'), eyes == 'open')
#AD subjects above and below 250 months of age
sum(dat$group=='AD' & dat$age > 250)
sum(dat$group=='AD' & dat$age <= 250)
dat <- filter(dat, age<=250)
dat <- filter(dat, nbChanOrig>20)
dat <- filter(dat, nbChanFinal/nbChanOrig >= .5)
# ageGroups = c(0, 999999) #use this to test what happens if all included in one!
# varNames = varNames[randsample(length(varNames),30)]
#run stats on the full dataset
results <- getResults(dat, varNames, ageGroups)
#### what proportion of EEG variables are predicted by different IVs? ####
#Table 3
results %>%
group_by(ageGroup, type) %>%
summarize(age = sum(age>.035) / length(age),
sex = sum(sex>.035) / length(sex),
IQ = sum(IQ>.035)/length(IQ),
Diag = sum(Diag>.035)/length(Diag),
Diag_Age = sum(Diag_Age>.035)/length(Diag_Age),
Diag_Sex = sum(Diag_Sex>.035)/length(Diag_Sex),
Diag_Age_Sex = sum(Diag_Age_Sex>.035)/length(Diag_Age_Sex))
dat <- results[[2]]
results <- results[[1]]
#### what proportion of EEG variables are predicted by different IVs? ####
#Table 3
results %>%
group_by(ageGroup, type) %>%
summarize(age = sum(age>.035) / length(age),
sex = sum(sex>.035) / length(sex),
IQ = sum(IQ>.035)/length(IQ),
Diag = sum(Diag>.035)/length(Diag),
Diag_Age = sum(Diag_Age>.035)/length(Diag_Age),
Diag_Sex = sum(Diag_Sex>.035)/length(Diag_Sex),
Diag_Age_Sex = sum(Diag_Age_Sex>.035)/length(Diag_Age_Sex))
repeats = 150
savePath = "R:\\MSS\\Johnson_Lab\\dtf8829\\GitHub\\SheffieldAutismBiomarkers\\bootstrapAnalysis\\"
test <- results %>% filter(Diag > .035)
stabilityMat <- matrix(0, nrow = repeats, ncol = length(test$dependentVariable))
stabilityMat <- as.data.frame(stabilityMat)
names(stabilityMat) <- test$dependentVariable
lookup <- paste(test$dependentVariable, test$ageGroup)
for(ii in 1:repeats){
print(ii)
tmpDat = randomSplit(dat, ageGroups)
tmpRes1 <- getResults(tmpDat[[1]], test$dependentVariable, ageGroups)
tmpRes1 <- tmpRes1[[1]]
screen = paste(tmpRes1$dependentVariable, tmpRes1$ageGroup)
tmpRes1 <- tmpRes1[screen %in% lookup, ]
tmpRes2 <- getResults(tmpDat[[2]], test$dependentVariable, ageGroups)
tmpRes2 <- tmpRes2[[1]]
tmpRes2 <- tmpRes2[screen %in% lookup, ]
stabilityMat[ii,] <- tmpRes1$Diag>.035 & tmpRes2$Diag>.035
}
stabilityMat_Diag <- stabilityMat
write.csv(stabilityMat_Diag,
paste(savePath, "Diag_stab.csv", sep = ''))
savePath = 'G:\\My Drive\\GitHub\\SheffieldAutismBiomarkers\\bootstrapAnalysis\\'
write.csv(stabilityMat_Diag,
paste(savePath, "Diag_stab.csv", sep = ''))
