dev.off()
outPlot <-ggplot(allEffects, aes(x=agreement, y=effectSize, color = predictor)) +
geom_jitter(size = 5, alpha = .5)+
theme_classic(base_size = 30)+
theme(axis.ticks.length=unit(-0.5, "cm"),
axis.line = element_line(colour = 'black', size = 3),
axis.ticks = element_line(colour = 'black', size = 3),
legend.position = c(0.8, 0.9)) +
guides(color = guide_legend(override.aes = list(size=10),
nrow=4)) +
ylab('effect size (\U1D702\U00B2\U209A)') +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))
png('effect_agree_relationship.png',         # File name
width=400, height=768)
print(outPlot)
dev.off()
outPlot <-ggplot(allEffects, aes(x=agreement, y=effectSize, color = predictor)) +
geom_jitter(size = 5, alpha = .5)+
theme_classic(base_size = 30)+
theme(axis.ticks.length=unit(-0.5, "cm"),
axis.line = element_line(colour = 'black', size = 3),
axis.ticks = element_line(colour = 'black', size = 3),
legend.position = c(0.8, 0.9)) +
guides(color = guide_legend(override.aes = list(size=10),
nrow=4)) +
ylab('effect size (\U1D702\U00B2\U209A)') +
scale_x_continuous(expand = c(0, 0), limits = c(0, 1.01), breaks = seq(0,1,.25)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, .7), breaks = seq(0,.7,.1))
png('effect_agree_relationship.png',         # File name
width=400, height=768)
print(outPlot)
dev.off()
outPlot <-ggplot(allEffects, aes(x=agreement, y=effectSize, color = predictor)) +
geom_jitter(size = 5, alpha = .5)+
theme_classic(base_size = 30)+
theme(axis.ticks.length=unit(-0.5, "cm"),
axis.line = element_line(colour = 'black', size = 3),
axis.ticks = element_line(colour = 'black', size = 3),
legend.position = c(0.8, 0.9)) +
guides(color = guide_legend(override.aes = list(size=10),
nrow=4)) +
ylab('effect size (\U1D702\U00B2\U209A)') +
scale_x_continuous(expand = c(0, 0), limits = c(0, 1.01), breaks = seq(0,1,.25)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, .65), breaks = seq(0,.65,.1))
png('effect_agree_relationship.png',         # File name
width=400, height=768)
print(outPlot)
dev.off()
outPlot <-ggplot(allEffects, aes(x=agreement, y=effectSize, color = predictor)) +
geom_jitter(size = 5, alpha = .5)+
theme_classic(base_size = 30)+
theme(axis.ticks.length=unit(-0.5, "cm"),
axis.line = element_line(colour = 'black', size = 3),
axis.ticks = element_line(colour = 'black', size = 3),
legend.position = c(0.6, 0.9)) +
guides(color = guide_legend(override.aes = list(size=10),
nrow=4)) +
ylab('effect size (\U1D702\U00B2\U209A)') +
scale_x_continuous(expand = c(0, 0), limits = c(0, 1.01), breaks = seq(0,1,.25)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, .65), breaks = seq(0,.65,.1))
png('effect_agree_relationship.png',         # File name
width=400, height=768)
print(outPlot)
dev.off()
outPlot <-ggplot(allEffects, aes(x=agreement, y=effectSize, color = predictor)) +
geom_jitter(size = 5, alpha = .5)+
theme_classic(base_size = 30)+
theme(axis.ticks.length=unit(-0.5, "cm"),
axis.line = element_line(colour = 'black', size = 3),
axis.ticks = element_line(colour = 'black', size = 3),
legend.position = c(0.67, 0.8)) +
guides(color = guide_legend(override.aes = list(size=10),
nrow=4)) +
ylab('effect size (\U1D702\U00B2\U209A)') +
scale_x_continuous(expand = c(0, 0), limits = c(0, 1.01), breaks = seq(0,1,.25)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, .65), breaks = seq(0,.65,.1))
png('effect_agree_relationship.png',         # File name
width=400, height=768)
print(outPlot)
dev.off()
test <- read.csv("C:\\Users\\pc1aod\\Documents\\GitHub\\SheffieldAutismBiomarkers\\autismBiomarkersAllData2.csv")
test$nbChanOrig[test$nbChanOrig==999] = 124
dat <- filter(test, group %in% c('CON', 'AD', 'ASD'), eyes == 'open', age<250, nbChanFinal/nbChanOrig >= .5, nbChanOrig>20)
setwd("C:\\Users\\pc1aod\\Documents\\GitHub\\SheffieldAutismBiomarkers\\figures")
#### some descriptives about the overall data set ####
png("main_AB.png",         # File name
width=1024, height=768)# Color
ggplot(dat, aes(x = age, color = group, fill = group)) + geom_histogram()
rect(1, 5, 3, 7, col="white")
dev.off()
ggplot(dat, aes(x = age, color = dataSet, fill = dataSet)) + geom_histogram()
ggplot(dat, aes(x = sex, color = group, fill = group)) + geom_bar()
ageGroups = quantile(filter(dat, group %in% c('AD', 'ASD'))$age , c(0,.33333,.666666,1.0))
ageGroups[1]= 0
ageGroups[4]=999
dat = read.csv("C:\\Users\\pc1aod\\Documents\\GitHub\\SheffieldAutismBiomarkers\\testSet.csv")
dat <- dat %>% select(-X)
dat2 = read.csv("C:\\Users\\pc1aod\\Documents\\GitHub\\SheffieldAutismBiomarkers\\trainSet.csv")
dat2 <- dat2 %>% select(-X)
comboDat = rbind(dat2, dat)
predNames2 = predNames
predNames2[4] = 'group'
for(vari in 1:4){
for(agei in 1:3){
temp = resultsDif[resultsDif$ageGroup == agei,]
tempRes = resultsTRAIN[resultsDif$ageGroup == agei,]
candidates = which(temp[predNames[vari]] < .2 & tempRes[predNames[vari]] > thresh)
target = candidates[which(tempRes[candidates,predNames[vari]]==max(tempRes[candidates,predNames[vari]]))]
if(length(target)>0){
limVals = quantile(comboDat[,varNames[target]], c(.1,.9))
limVals = c(limVals[1] - (limVals[2]-limVals[1])*.2,
limVals[2] + (limVals[2]-limVals[1])*.2)
outPlot <- ggplot(comboDat, aes_string(x = 'age', y = varNames[target], color = 'group', shape = 'sex', size = 'IQ')) +
geom_jitter(alpha = .75)+
scale_color_manual(values=c( "#E1C271", "#3BACDD","#4E554E"),
labels=c(  'AD', 'ASD', 'CON')) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
ylim(limVals) +
ylab(varNames[target]) +
ggtitle(paste(varNames[target], '; age group: ', as.character(agei), sep = ''))+
guides(color = guide_legend(override.aes = list(size=10)),
shape = guide_legend(override.aes = list(size=10))) +
geom_vline(xintercept = ageGroups[2], linetype = 'dashed', linewidth = 3)+
geom_vline(xintercept = ageGroups[3], linetype = 'dashed', linewidth = 3)
# rect(1, 5, 3, 7, col="white")
png(paste( 'bestPredicted_',predNames[vari],'_', agei, '.png', sep = ''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
}
}
}
predNames2 = predNames
predNames2[4] = 'group'
for(vari in 1:4){
for(agei in 1:3){
temp = resultsDif[resultsDif$ageGroup == agei,]
tempRes = resultsTRAIN[resultsDif$ageGroup == agei,]
candidates = which(temp[predNames[vari]] < .2 & tempRes[predNames[vari]] > thresh)
target = candidates[which(tempRes[candidates,predNames[vari]]==max(tempRes[candidates,predNames[vari]]))]
if(length(target)>0){
limVals = quantile(comboDat[,varNames[target]], c(.1,.9))
limVals = c(limVals[1] - (limVals[2]-limVals[1])*.2,
limVals[2] + (limVals[2]-limVals[1])*.2)
outPlot <- ggplot(comboDat, aes_string(x = 'age', y = varNames[target], color = 'group', shape = 'sex', size = 'IQ')) +
geom_jitter(alpha = .75)+
scale_color_manual(values=c( "#E1C271", "#3BACDD","#4E554E"),
labels=c(  'AD', 'ASD', 'CON')) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
ylim(limVals) +
ylab(varNames[target]) +
ggtitle(paste(varNames[target], '; age group: ', as.character(agei), sep = ''))+
guides(color = guide_legend(override.aes = list(size=10)),
shape = guide_legend(override.aes = list(size=10))) +
geom_vline(xintercept = ageGroups[2], linetype = 'dashed', linewidth = 3)+
geom_vline(xintercept = ageGroups[3], linetype = 'dashed', linewidth = 3)
# rect(1, 5, 3, 7, col="white")
png(paste( 'bestPredicted_',predNames[vari],'_', agei, '.png', sep = ''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
}
}
}
getwd()
setwd("C:\\Users\\pc1aod\\Documents\\GitHub\\SheffieldAutismBiomarkers\\figures\\summaryFigs")
for(vari in 1:4){
for(agei in 1:3){
temp = resultsDif[resultsDif$ageGroup == agei,]
tempRes = resultsTRAIN[resultsDif$ageGroup == agei,]
candidates = which(temp[predNames[vari]] < .2 & tempRes[predNames[vari]] > thresh)
target = candidates[which(tempRes[candidates,predNames[vari]]==max(tempRes[candidates,predNames[vari]]))]
if(length(target)>0){
limVals = quantile(comboDat[,varNames[target]], c(.1,.9))
limVals = c(limVals[1] - (limVals[2]-limVals[1])*.2,
limVals[2] + (limVals[2]-limVals[1])*.2)
outPlot <- ggplot(comboDat, aes_string(x = 'age', y = varNames[target], color = 'group', shape = 'sex', size = 'IQ')) +
geom_jitter(alpha = .75)+
scale_color_manual(values=c( "#E1C271", "#3BACDD","#4E554E"),
labels=c(  'AD', 'ASD', 'CON')) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
ylim(limVals) +
ylab(varNames[target]) +
ggtitle(paste(varNames[target], '; age group: ', as.character(agei), sep = ''))+
guides(color = guide_legend(override.aes = list(size=10)),
shape = guide_legend(override.aes = list(size=10))) +
geom_vline(xintercept = ageGroups[2], linetype = 'dashed', linewidth = 2, alpha = .75)+
geom_vline(xintercept = ageGroups[3], linetype = 'dashed', linewidth = 2, alpha = .75)
# rect(1, 5, 3, 7, col="white")
png(paste( 'bestPredicted_',predNames[vari],'_', agei, '.png', sep = ''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
}
}
}
vari = 2
for(agei in 1:3){
temp = resultsDif[resultsDif$ageGroup == agei,]
tempRes = resultsTRAIN[resultsDif$ageGroup == agei,]
candidates = which(temp[predNames[vari]] < .2 & tempRes[predNames[vari]] > thresh)
target = candidates[which(tempRes[candidates,predNames[vari]]==max(tempRes[candidates,predNames[vari]]))]
if(length(target)>0){
limVals = quantile(comboDat[,varNames[target]], c(.1,.9))
limVals = c(limVals[1] - (limVals[2]-limVals[1])*.2,
limVals[2] + (limVals[2]-limVals[1])*.2)
outPlot <- ggplot(comboDat, aes_string(x = 'age', y = varNames[target], color = 'sex', shape = 'group', size = 'IQ')) +
geom_jitter(alpha = .75)+
# scale_color_manual(values=c( "#E1C271", "#3BACDD","#4E554E"),
#                    labels=c(  'AD', 'ASD', 'CON')) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
ylim(limVals) +
ylab(varNames[target]) +
ggtitle(paste(varNames[target], '; age group: ', as.character(agei), sep = ''))+
guides(color = guide_legend(override.aes = list(size=10)),
shape = guide_legend(override.aes = list(size=10))) +
geom_vline(xintercept = ageGroups[2], linetype = 'dashed', linewidth = 2, alpha = .75)+
geom_vline(xintercept = ageGroups[3], linetype = 'dashed', linewidth = 2, alpha = .75)
# rect(1, 5, 3, 7, col="white")
png(paste( 'bestPredicted_',predNames[vari],'_', agei, '.png', sep = ''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
}
}
## PLOTS FOR IQ!
vari = 3
for(agei in 1:3){
temp = resultsDif[resultsDif$ageGroup == agei,]
tempRes = resultsTRAIN[resultsDif$ageGroup == agei,]
candidates = which(temp[predNames[vari]] < .2 & tempRes[predNames[vari]] > thresh)
target = candidates[which(tempRes[candidates,predNames[vari]]==max(tempRes[candidates,predNames[vari]]))]
if(length(target)>0){
limVals = quantile(comboDat[,varNames[target]], c(.1,.9))
limVals = c(limVals[1] - (limVals[2]-limVals[1])*.2,
limVals[2] + (limVals[2]-limVals[1])*.2)
outPlot <- ggplot(comboDat, aes_string(x = 'IQ', y = varNames[target], color = 'age', shape = 'group')) +
geom_jitter(alpha = .75)+
# scale_color_manual(values=c( "#E1C271", "#3BACDD","#4E554E"),
#                    labels=c(  'AD', 'ASD', 'CON')) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
ylim(limVals) +
ylab(varNames[target]) +
ggtitle(paste(varNames[target], '; age group: ', as.character(agei), sep = ''))+
guides(color = guide_legend(override.aes = list(size=10)),
shape = guide_legend(override.aes = list(size=10))) +
geom_vline(xintercept = ageGroups[2], linetype = 'dashed', linewidth = 2, alpha = .75)+
geom_vline(xintercept = ageGroups[3], linetype = 'dashed', linewidth = 2, alpha = .75)
# rect(1, 5, 3, 7, col="white")
png(paste( 'bestPredicted_',predNames[vari],'_', agei, '.png', sep = ''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
}
}
## PLOTS FOR IQ!
vari = 3
for(agei in 1:3){
temp = resultsDif[resultsDif$ageGroup == agei,]
tempRes = resultsTRAIN[resultsDif$ageGroup == agei,]
candidates = which(temp[predNames[vari]] < .2 & tempRes[predNames[vari]] > thresh)
target = candidates[which(tempRes[candidates,predNames[vari]]==max(tempRes[candidates,predNames[vari]]))]
if(length(target)>0){
limVals = quantile(comboDat[,varNames[target]], c(.1,.9))
limVals = c(limVals[1] - (limVals[2]-limVals[1])*.2,
limVals[2] + (limVals[2]-limVals[1])*.2)
outPlot <- ggplot(comboDat, aes_string(x = 'IQ', y = varNames[target], color = 'age', shape = 'group')) +
geom_jitter(alpha = .75, size = 10)+
# scale_color_manual(values=c( "#E1C271", "#3BACDD","#4E554E"),
#                    labels=c(  'AD', 'ASD', 'CON')) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
ylim(limVals) +
ylab(varNames[target]) +
ggtitle(paste(varNames[target], '; age group: ', as.character(agei), sep = ''))+
guides(color = guide_legend(override.aes = list(size=10)),
shape = guide_legend(override.aes = list(size=10))) +
geom_vline(xintercept = ageGroups[2], linetype = 'dashed', linewidth = 2, alpha = .75)+
geom_vline(xintercept = ageGroups[3], linetype = 'dashed', linewidth = 2, alpha = .75)
# rect(1, 5, 3, 7, col="white")
png(paste( 'bestPredicted_',predNames[vari],'_', agei, '.png', sep = ''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
}
}
vari = 3
for(agei in 1:3){
temp = resultsDif[resultsDif$ageGroup == agei,]
tempRes = resultsTRAIN[resultsDif$ageGroup == agei,]
candidates = which(temp[predNames[vari]] < .2 & tempRes[predNames[vari]] > thresh)
target = candidates[which(tempRes[candidates,predNames[vari]]==max(tempRes[candidates,predNames[vari]]))]
if(length(target)>0){
limVals = quantile(comboDat[,varNames[target]], c(.1,.9))
limVals = c(limVals[1] - (limVals[2]-limVals[1])*.2,
limVals[2] + (limVals[2]-limVals[1])*.2)
outPlot <- ggplot(comboDat, aes_string(x = 'IQ', y = varNames[target], color = 'age', shape = 'group')) +
geom_jitter(alpha = .75, size = 7)+
# scale_color_manual(values=c( "#E1C271", "#3BACDD","#4E554E"),
#                    labels=c(  'AD', 'ASD', 'CON')) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
ylim(limVals) +
ylab(varNames[target]) +
ggtitle(paste(varNames[target], '; age group: ', as.character(agei), sep = ''))+
guides(color = guide_legend(override.aes = list(size=10)),
shape = guide_legend(override.aes = list(size=10))) +
geom_vline(xintercept = ageGroups[2], linetype = 'dashed', linewidth = 2, alpha = .75)+
geom_vline(xintercept = ageGroups[3], linetype = 'dashed', linewidth = 2, alpha = .75)
# rect(1, 5, 3, 7, col="white")
png(paste( 'bestPredicted_',predNames[vari],'_', agei, '.png', sep = ''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
}
}
## PLOTS FOR IQ!
vari = 3
for(agei in 1:3){
temp = resultsDif[resultsDif$ageGroup == agei,]
tempRes = resultsTRAIN[resultsDif$ageGroup == agei,]
candidates = which(temp[predNames[vari]] < .2 & tempRes[predNames[vari]] > thresh)
target = candidates[which(tempRes[candidates,predNames[vari]]==max(tempRes[candidates,predNames[vari]]))]
if(length(target)>0){
limVals = quantile(comboDat[,varNames[target]], c(.1,.9))
limVals = c(limVals[1] - (limVals[2]-limVals[1])*.2,
limVals[2] + (limVals[2]-limVals[1])*.2)
outPlot <- ggplot(comboDat, aes_string(x = 'IQ', y = varNames[target], color = 'age', shape = 'group')) +
geom_jitter(alpha = .75, size = 7)+
# scale_color_manual(values=c( "#E1C271", "#3BACDD","#4E554E"),
#                    labels=c(  'AD', 'ASD', 'CON')) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
ylim(limVals) +
ylab(varNames[target]) +
ggtitle(paste(varNames[target], '; age group: ', as.character(agei), sep = ''))+
guides(color = guide_legend(override.aes = list(size=10)),
shape = guide_legend(override.aes = list(size=10)))
# geom_vline(xintercept = ageGroups[2], linetype = 'dashed', linewidth = 2, alpha = .75)+
# geom_vline(xintercept = ageGroups[3], linetype = 'dashed', linewidth = 2, alpha = .75)
# rect(1, 5, 3, 7, col="white")
png(paste( 'bestPredicted_',predNames[vari],'_', agei, '.png', sep = ''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
}
}
vari = 4
for(agei in 1:3){
temp = resultsDif[resultsDif$ageGroup == agei,]
tempRes = resultsTRAIN[resultsDif$ageGroup == agei,]
candidates = which(temp[predNames[vari]] < .2 & tempRes[predNames[vari]] > thresh)
target = candidates[which(tempRes[candidates,predNames[vari]]==max(tempRes[candidates,predNames[vari]]))]
if(length(target)>0){
limVals = quantile(comboDat[,varNames[target]], c(.1,.9))
limVals = c(limVals[1] - (limVals[2]-limVals[1])*.2,
limVals[2] + (limVals[2]-limVals[1])*.2)
outPlot <- ggplot(comboDat, aes_string(x = 'group', y = varNames[target], color = 'group', shape = 'sex', size = 'age')) +
geom_jitter(alpha = .75)+
scale_color_manual(values=c( "#E1C271", "#3BACDD","#4E554E"),
labels=c(  'AD', 'ASD', 'CON')) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
ylim(limVals) +
ylab(varNames[target]) +
ggtitle(paste(varNames[target], '; age group: ', as.character(agei), sep = ''))+
guides(color = guide_legend(override.aes = list(size=10)),
shape = guide_legend(override.aes = list(size=10))) +
geom_vline(xintercept = ageGroups[2], linetype = 'dashed', linewidth = 2, alpha = .75)+
geom_vline(xintercept = ageGroups[3], linetype = 'dashed', linewidth = 2, alpha = .75)
# rect(1, 5, 3, 7, col="white")
png(paste( 'bestPredicted_',predNames[vari],'_', agei, '.png', sep = ''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
}
}
vari = 4
for(agei in 1:3){
temp = resultsDif[resultsDif$ageGroup == agei,]
tempRes = resultsTRAIN[resultsDif$ageGroup == agei,]
candidates = which(temp[predNames[vari]] < .2 & tempRes[predNames[vari]] > thresh)
target = candidates[which(tempRes[candidates,predNames[vari]]==max(tempRes[candidates,predNames[vari]]))]
if(length(target)>0){
limVals = quantile(comboDat[,varNames[target]], c(.1,.9))
limVals = c(limVals[1] - (limVals[2]-limVals[1])*.2,
limVals[2] + (limVals[2]-limVals[1])*.2)
outPlot <- ggplot(comboDat, aes_string(x = 'group', y = varNames[target], color = 'group', shape = 'sex', size = 'age')) +
geom_jitter(alpha = .75)+
scale_color_manual(values=c( "#E1C271", "#3BACDD","#4E554E"),
labels=c(  'AD', 'ASD', 'CON')) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
ylim(limVals) +
scale_size(range = c(3,10))+
ylab(varNames[target]) +
ggtitle(paste(varNames[target], '; age group: ', as.character(agei), sep = ''))+
guides(color = guide_legend(override.aes = list(size=10)),
shape = guide_legend(override.aes = list(size=10))) +
geom_vline(xintercept = ageGroups[2], linetype = 'dashed', linewidth = 2, alpha = .75)+
geom_vline(xintercept = ageGroups[3], linetype = 'dashed', linewidth = 2, alpha = .75)
# rect(1, 5, 3, 7, col="white")
png(paste( 'bestPredicted_',predNames[vari],'_', agei, '.png', sep = ''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
}
}
vari = 4
for(agei in 1:3){
temp = resultsDif[resultsDif$ageGroup == agei,]
tempRes = resultsTRAIN[resultsDif$ageGroup == agei,]
candidates = which(temp[predNames[vari]] < .2 & tempRes[predNames[vari]] > thresh)
target = candidates[which(tempRes[candidates,predNames[vari]]==max(tempRes[candidates,predNames[vari]]))]
if(length(target)>0){
limVals = quantile(comboDat[,varNames[target]], c(.1,.9))
limVals = c(limVals[1] - (limVals[2]-limVals[1])*.2,
limVals[2] + (limVals[2]-limVals[1])*.2)
outPlot <- ggplot(comboDat, aes_string(x = 'age', y = varNames[target], color = 'group', shape = 'sex', size = 'IQ')) +
geom_jitter(alpha = .75)+
scale_color_manual(values=c( "#E1C271", "#3BACDD","#4E554E"),
labels=c(  'AD', 'ASD', 'CON')) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
ylim(limVals) +
scale_size(range = c(3,10))+
ylab(varNames[target]) +
ggtitle(paste(varNames[target], '; age group: ', as.character(agei), sep = ''))+
guides(color = guide_legend(override.aes = list(size=10)),
shape = guide_legend(override.aes = list(size=10))) +
geom_vline(xintercept = ageGroups[2], linetype = 'dashed', linewidth = 2, alpha = .75)+
geom_vline(xintercept = ageGroups[3], linetype = 'dashed', linewidth = 2, alpha = .75)
# rect(1, 5, 3, 7, col="white")
png(paste( 'bestPredicted_',predNames[vari],'_', agei, '.png', sep = ''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
}
}
vari = 4
for(agei in 1:3){
temp = resultsDif[resultsDif$ageGroup == agei,]
tempRes = resultsTRAIN[resultsDif$ageGroup == agei,]
candidates = which(temp[predNames[vari]] < .2 & tempRes[predNames[vari]] > thresh)
target = candidates[which(tempRes[candidates,predNames[vari]]==max(tempRes[candidates,predNames[vari]]))]
if(length(target)>0){
limVals = quantile(comboDat[,varNames[target]], c(.1,.9))
limVals = c(limVals[1] - (limVals[2]-limVals[1])*.25,
limVals[2] + (limVals[2]-limVals[1])*.25)
outPlot <- ggplot(comboDat, aes_string(x = 'age', y = varNames[target], color = 'group', shape = 'sex', size = 'IQ')) +
geom_jitter(alpha = .75)+
scale_color_manual(values=c( "#E1C271", "#3BACDD","#4E554E"),
labels=c(  'AD', 'ASD', 'CON')) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
ylim(limVals) +
scale_size(range = c(3,10))+
ylab(varNames[target]) +
ggtitle(paste(varNames[target], '; age group: ', as.character(agei), sep = ''))+
guides(color = guide_legend(override.aes = list(size=10)),
shape = guide_legend(override.aes = list(size=10))) +
geom_vline(xintercept = ageGroups[2], linetype = 'dashed', linewidth = 2, alpha = .75)+
geom_vline(xintercept = ageGroups[3], linetype = 'dashed', linewidth = 2, alpha = .75)
# rect(1, 5, 3, 7, col="white")
png(paste( 'bestPredicted_',predNames[vari],'_', agei, '.png', sep = ''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
}
}
