#default is autistic > control
if(agei==1){
biomark = biomark * -1
}
limVals = quantile(biomark, c(.025,.975))
criteria = rev(seq(limVals[1], limVals[2], (limVals[2] - limVals[1])/100))
criteria = criteria[1:100]
ROC = getROC(biomark, groupID, criteria)
### prep a results data frame to try various base rates
baseRates = c(seq(.001, 1, .01))
results = expand.grid(base=baseRates, costRatio=costRatio)
results$TPR = NaN
results$FPR = NaN
results$acc = NaN
results$PPV = NaN
results$infoGain = NaN
for(bb in 1:length(baseRates)){
print(bb)
baseRate = baseRates[bb]
resi = which(results$base == baseRate)
ADGroup = sample(biomark[groupID==2], round(baseRate*10000), replace = T )
CONGroup = sample(biomark[groupID==1], round((1-baseRate)*10000), replace = T)
simBiomark = c(ADGroup, CONGroup)
simID = rep(1,length(simBiomark))
simID[1:length(ADGroup)] = 2
simROC = getROC(simBiomark, simID, criteria)
simROC$TPR[simROC$TPR==0] = 1/10000
simROC$FPR[simROC$FPR==0] = 1/10000
for(ii in 1:length(resi)){
ratio = simROC$TPR/simROC$FPR
costVal = ((1-baseRate)/baseRate) * results$costRatio[resi[ii]]
critVal = which(abs(ratio-costVal)==min(abs(ratio-costVal)))
if(length(critVal)>1){
critVal = critVal[1]
}
if(length(critVal)==1){
if(is.finite(critVal)){
results$TPR[resi[ii]] = simROC$TPR[critVal]
results$FPR[resi[ii]] = simROC$FPR[critVal]
results$acc[resi[ii]] = simROC$acc[critVal]
results$PPV[resi[ii]] = simROC$hits[critVal] / (simROC$hits[critVal] + simROC$FAs[critVal])
results$infoGain[resi[ii]] = ROC$TP[critVal]*baseRate / (ROC$TP[critVal]*baseRate + ROC$FP[critVal]*(1-baseRate))
}
}
}
}
breakPoints =  c(.001, .01, .1, 1, 10, 100, 1000)
outPlot <- ggplot(results, aes(x=base, y = costRatio, fill = TPR-FPR)) +
geom_tile() +
scale_y_log10(breaks = breakPoints) +
scale_fill_gradient(low = '#FFFFFF', high = '#3A317D', na.value = 'white') +
theme_classic() +
geom_vline(xintercept = .0148, size = 2, linetype = 'longdash', color = 'red', alpha = .5) +
geom_vline(xintercept = .187, size = 2, linetype = 'longdash', color = 'red', alpha = .5) +
geom_vline(xintercept = .5, size = 2, linetype = 'longdash', color = 'red', alpha = .5) +
ylab('FP<FN      costRatio     FP>FN') +
xlab('base rate') +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
ggtitle(paste('TPR-FPR as a function of costs and benefits ', as.character(agei), sep = ''))+
guides(color = guide_legend(override.aes = list(size=10)))
locs = seq(-3.5,3.5,1)
for(vv in 1:8){
outPlot = outPlot +
geom_hline(yintercept = 10^locs[vv], color = 'grey', size = 2, linetype =2)
}
locs = c(0,.25,.5,.75,1)
for(vv in 1:length(locs)){
outPlot = outPlot +
geom_vline(xintercept = locs[vv], color = 'grey', size = 2, linetype =2)
}
png(paste( 'TPR_FPR_costmap_age', agei, '.png', sep = ''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
outPlot <- ggplot(results, aes(x=base, y = costRatio, fill = FPR)) +
geom_tile() +
scale_y_log10(breaks = breakPoints) +
scale_fill_gradient(low = '#4D7902', high = '#CE2029', na.value = 'black',
limits = c(0, 1)) +
theme_classic() +
ylab('FP<FN      costRatio     FP>FN') +
xlab('base rate') +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
ggtitle(paste('FPR as a function of costs and benefits ', as.character(agei), sep = ''))+
guides(color = guide_legend(override.aes = list(size=10)))
locs = seq(-3.5,3.5,1)
for(vv in 1:8){
outPlot = outPlot +
geom_vline(xintercept = 10^locs[vv], color = 'grey', size = 2, linetype =2) +
geom_hline(yintercept = 10^locs[vv], color = 'grey', size = 2, linetype =2)
}
png(paste( 'FPR_costmap_age', agei, 'base', bb, '.png', sep = ''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
# results$accRound = results$acc
# results$accRound[results$acc>=.60] = .59
# results$accRound[results$acc<=.50] = .50
breakPoints =  c(.001, .01, .1, 1, 10, 100, 1000)
outPlot <- ggplot(results, aes(x=base, y = costRatio, fill = acc)) +
geom_tile() +
scale_y_log10(breaks = breakPoints) +
scale_fill_gradient(low = '#FFFFFF', high = '#3A317D', na.value = 'black')+
#limits = c(.5, .75)) +
theme_classic() +
ylab('FP<FN      costRatio     FP>FN') +
xlab('base rate') +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
geom_vline(xintercept = .0148, size = 2, linetype = 'longdash', color = 'red', alpha = .5) +
geom_vline(xintercept = .187, size = 2, linetype = 'longdash', color = 'red', alpha = .5) +
geom_vline(xintercept = .5, size = 2, linetype = 'longdash', color = 'red', alpha = .5) +
ggtitle(paste('accuracy as a function of costs and benefits ', as.character(agei), sep = ''))+
guides(color = guide_legend(override.aes = list(size=10)))
locs = seq(-3.5,3.5,1)
for(vv in 1:8){
outPlot = outPlot +
geom_hline(yintercept = 10^locs[vv], color = 'grey', size = 2, linetype =2)
}
locs = c(0,.25,.5,.75,1)
for(vv in 1:length(locs)){
outPlot = outPlot +
geom_vline(xintercept = locs[vv], color = 'grey', size = 2, linetype =2)
}
print(outPlot)
png(paste( 'acc_costmap_age', agei, 'base', bb, '.png', sep = ''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
outPlot <- ggplot(results, aes(x = acc)) +
geom_histogram()
png(paste( 'acc_hist_age', agei, 'base', bb, '.png', sep = ''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
ggplot(results, aes(x = FPR, y = TPR)) + geom_jitter()
}
agei = 3
temp = resultsDif[resultsDif$ageGroup == agei,]
tempRes = resultsTRAIN[resultsDif$ageGroup == agei,]
candidates = which(temp$sex > .8 & tempRes$sex > thresh)
target = candidates[which.max(tempRes[candidates,predNames[vari]])]
targName = temp$dependentVariable[target]
# limVals = c(limVals[1] - (limVals[2]-limVals[1])*.5,
#             limVals[2] + (limVals[2]-limVals[1])*.5)
curDat = comboDat %>% filter(ageGroup==agei)
groupID = rep(1,length(curDat$sex))
groupID[curDat$sex != 'M'] = 2
#ALL Female SUBS CODED AS 2
biomark = curDat[,targName]
#is the AD group higher or lower than the CON group?
#default is autistic > control
if(agei>1){
biomark = biomark * -1
}
limVals = quantile(biomark, c(.025,.975))
criteria = rev(seq(limVals[1], limVals[2], (limVals[2] - limVals[1])/100))
criteria = criteria[1:100]
ROC = getROC(biomark, groupID, criteria)
### prep a results data frame to try various base rates
baseRates = c(seq(.001, 1, .01))
results = expand.grid(base=baseRates, costRatio=costRatio)
results$TPR = NaN
results$FPR = NaN
results$acc = NaN
for(bb in 1:length(baseRates)){
print(bb)
baseRate = baseRates[bb]
resi = which(results$base == baseRate)
ADGroup = sample(biomark[groupID==2], round(baseRate*10000), replace = T )
CONGroup = sample(biomark[groupID==1], round((1-baseRate)*10000), replace = T)
simBiomark = c(ADGroup, CONGroup)
simID = rep(1,length(simBiomark))
simID[1:length(ADGroup)] = 2
simROC = getROC(simBiomark, simID, criteria)
simROC$TPR[simROC$TPR==0] = 1/10000
simROC$FPR[simROC$FPR==0] = 1/10000
for(ii in 1:length(resi)){
ratio = simROC$TPR/simROC$FPR
costVal = ((1-baseRate)/baseRate) * results$costRatio[resi[ii]]
critVal = which(abs(ratio-costVal)==min(abs(ratio-costVal)))
if(length(critVal)>1){
critVal = critVal[1]
}
if(length(critVal)==1){
if(is.finite(critVal)){
results$TPR[resi[ii]] = simROC$TPR[critVal]
results$FPR[resi[ii]] = simROC$FPR[critVal]
results$acc[resi[ii]] = simROC$acc[critVal]
results$PPV[resi[ii]] = simROC$hits[critVal] / (simROC$hits[critVal] + simROC$FAs[critVal])
results$infoGain[resi[ii]] = ROC$TP[critVal]*baseRate / (ROC$TP[critVal]*baseRate + ROC$FP[critVal]*(1-baseRate))
}
}
}
}
ggplot(results, aes(x=base, y = costRatio, fill = TPR-FPR)) +
geom_tile() +
scale_y_log10(breaks = breakPoints) +
scale_fill_gradient(low = '#FFFFFF', high = '#3A317D', na.value = 'white') +
theme_classic() +
geom_vline(xintercept = .0148, size = 2, linetype = 'longdash', color = 'red', alpha = .5) +
geom_vline(xintercept = .187, size = 2, linetype = 'longdash', color = 'red', alpha = .5) +
geom_vline(xintercept = .5, size = 2, linetype = 'longdash', color = 'red', alpha = .5) +
ylab('FP<FN      costRatio     FP>FN') +
xlab('base rate') +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
ggtitle(paste('TPR-FPR as a function of costs and benefits ', as.character(agei), sep = ''))+
guides(color = guide_legend(override.aes = list(size=10)))
outPlot <- ggplot(results, aes(x=base, y = costRatio, fill = TPR-FPR)) +
geom_tile() +
scale_y_log10(breaks = breakPoints) +
scale_fill_gradient(low = '#FFFFFF', high = '#3A317D', na.value = 'white') +
theme_classic() +
geom_vline(xintercept = .0148, size = 2, linetype = 'longdash', color = 'red', alpha = .5) +
geom_vline(xintercept = .187, size = 2, linetype = 'longdash', color = 'red', alpha = .5) +
geom_vline(xintercept = .5, size = 2, linetype = 'longdash', color = 'red', alpha = .5) +
ylab('FP<FN      costRatio     FP>FN') +
xlab('base rate') +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
ggtitle(paste('TPR-FPR as a function of costs and benefits ', as.character(agei), sep = ''))+
guides(color = guide_legend(override.aes = list(size=10)))
locs = seq(-3.5,3.5,1)
for(vv in 1:8){
outPlot = outPlot +
geom_hline(yintercept = 10^locs[vv], color = 'grey', size = 2, linetype =2)
}
locs = c(0,.25,.5,.75,1)
for(vv in 1:length(locs)){
outPlot = outPlot +
geom_vline(xintercept = locs[vv], color = 'grey', size = 2, linetype =2)
}
print(outPlot)
baseVals = c(.0148, .187)
costRatio = logspace(-3,3,100)
for(agei in 1:3){
#   limVals = quantile(comboDat[,targName], c(.025,.975))
#   # limVals = c(limVals[1] - (limVals[2]-limVals[1])*.5,
#   #             limVals[2] + (limVals[2]-limVals[1])*.5)
#
#   curDat = comboDat %>% filter(ageGroup==agei)
#   biomark = curDat[,targName]
#   criteria = rev(seq(limVals[1], limVals[2], (limVals[2] - limVals[1])/100))
#   criteria = criteria[1:100]
#   #is the AD group higher or lower than the CON group?
#   #default is autistic < control
temp = resultsDif[resultsDif$ageGroup == agei,]
tempRes = resultsTRAIN[resultsDif$ageGroup == agei,]
candidates = which(temp$Diag > .8 & tempRes$Diag > thresh)
if(agei==1){
target = candidates[6]
}else{
target = candidates[which(tempRes[candidates,predNames[vari]]==max(tempRes[candidates,predNames[vari]]))]
}
targName = temp$dependentVariable[target]
curDat = comboDat %>% filter(ageGroup==agei)
groupID = rep(1,length(curDat$group))
groupID[curDat$group != 'CON'] = 2
#ALL AD AND ASD SUBS CODED AS 2
biomark = curDat[,targName]
#is the AD group higher or lower than the CON group?
#default is autistic > control
if(agei==1){
biomark = biomark * -1
}
limVals = quantile(biomark, c(.025,.975))
criteria = rev(seq(limVals[1], limVals[2], (limVals[2] - limVals[1])/100))
criteria = criteria[1:100]
ROC = getROC(biomark, groupID, criteria)
### prep a results data frame to try various base rates
baseRates = c(seq(.001, 1, .01))
results = expand.grid(base=baseRates, costRatio=costRatio)
results$TPR = NaN
results$FPR = NaN
results$acc = NaN
results$PPV = NaN
results$infoGain = NaN
for(bb in 1:length(baseRates)){
print(bb)
baseRate = baseRates[bb]
resi = which(results$base == baseRate)
ADGroup = sample(biomark[groupID==2], round(baseRate*1000000), replace = T )
CONGroup = sample(biomark[groupID==1], round((1-baseRate)*1000000), replace = T)
simBiomark = c(ADGroup, CONGroup)
simID = rep(1,length(simBiomark))
simID[1:length(ADGroup)] = 2
simROC = getROC(simBiomark, simID, criteria)
simROC$TPR[simROC$TPR==0] = 1/1000000
simROC$FPR[simROC$FPR==0] = 1/1000000
for(ii in 1:length(resi)){
ratio = simROC$TPR/simROC$FPR
costVal = ((1-baseRate)/baseRate) * results$costRatio[resi[ii]]
critVal = which(abs(ratio-costVal)==min(abs(ratio-costVal)))
if(length(critVal)>1){
critVal = critVal[1]
}
if(length(critVal)==1){
if(is.finite(critVal)){
results$TPR[resi[ii]] = simROC$TPR[critVal]
results$FPR[resi[ii]] = simROC$FPR[critVal]
results$acc[resi[ii]] = simROC$acc[critVal]
results$PPV[resi[ii]] = simROC$hits[critVal] / (simROC$hits[critVal] + simROC$FAs[critVal])
results$infoGain[resi[ii]] = ROC$TP[critVal]*baseRate / (ROC$TP[critVal]*baseRate + ROC$FP[critVal]*(1-baseRate))
}
}
}
}
breakPoints =  c(.001, .01, .1, 1, 10, 100, 1000)
outPlot <- ggplot(results, aes(x=base, y = costRatio, fill = TPR-FPR)) +
geom_tile() +
scale_y_log10(breaks = breakPoints) +
scale_fill_gradient(low = '#FFFFFF', high = '#3A317D', na.value = 'white') +
theme_classic() +
geom_vline(xintercept = .0148, size = 2, linetype = 'longdash', color = 'red', alpha = .5) +
geom_vline(xintercept = .187, size = 2, linetype = 'longdash', color = 'red', alpha = .5) +
geom_vline(xintercept = .5, size = 2, linetype = 'longdash', color = 'red', alpha = .5) +
ylab('FP<FN      costRatio     FP>FN') +
xlab('base rate') +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
ggtitle(paste('TPR-FPR as a function of costs and benefits ', as.character(agei), sep = ''))+
guides(color = guide_legend(override.aes = list(size=10)))
locs = seq(-3.5,3.5,1)
for(vv in 1:8){
outPlot = outPlot +
geom_hline(yintercept = 10^locs[vv], color = 'grey', size = 2, linetype =2)
}
locs = c(0,.25,.5,.75,1)
for(vv in 1:length(locs)){
outPlot = outPlot +
geom_vline(xintercept = locs[vv], color = 'grey', size = 2, linetype =2)
}
png(paste( 'TPR_FPR_costmap_age', agei, '.png', sep = ''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
outPlot <- ggplot(results, aes(x=base, y = costRatio, fill = FPR)) +
geom_tile() +
scale_y_log10(breaks = breakPoints) +
scale_fill_gradient(low = '#4D7902', high = '#CE2029', na.value = 'black',
limits = c(0, 1)) +
theme_classic() +
ylab('FP<FN      costRatio     FP>FN') +
xlab('base rate') +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
ggtitle(paste('FPR as a function of costs and benefits ', as.character(agei), sep = ''))+
guides(color = guide_legend(override.aes = list(size=10)))
locs = seq(-3.5,3.5,1)
for(vv in 1:8){
outPlot = outPlot +
geom_vline(xintercept = 10^locs[vv], color = 'grey', size = 2, linetype =2) +
geom_hline(yintercept = 10^locs[vv], color = 'grey', size = 2, linetype =2)
}
png(paste( 'FPR_costmap_age', agei, 'base', bb, '.png', sep = ''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
# results$accRound = results$acc
# results$accRound[results$acc>=.60] = .59
# results$accRound[results$acc<=.50] = .50
breakPoints =  c(.001, .01, .1, 1, 10, 100, 1000)
outPlot <- ggplot(results, aes(x=base, y = costRatio, fill = acc)) +
geom_tile() +
scale_y_log10(breaks = breakPoints) +
scale_fill_gradient(low = '#FFFFFF', high = '#3A317D', na.value = 'black')+
#limits = c(.5, .75)) +
theme_classic() +
ylab('FP<FN      costRatio     FP>FN') +
xlab('base rate') +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
geom_vline(xintercept = .0148, size = 2, linetype = 'longdash', color = 'red', alpha = .5) +
geom_vline(xintercept = .187, size = 2, linetype = 'longdash', color = 'red', alpha = .5) +
geom_vline(xintercept = .5, size = 2, linetype = 'longdash', color = 'red', alpha = .5) +
ggtitle(paste('accuracy as a function of costs and benefits ', as.character(agei), sep = ''))+
guides(color = guide_legend(override.aes = list(size=10)))
locs = seq(-3.5,3.5,1)
for(vv in 1:8){
outPlot = outPlot +
geom_hline(yintercept = 10^locs[vv], color = 'grey', size = 2, linetype =2)
}
locs = c(0,.25,.5,.75,1)
for(vv in 1:length(locs)){
outPlot = outPlot +
geom_vline(xintercept = locs[vv], color = 'grey', size = 2, linetype =2)
}
print(outPlot)
png(paste( 'acc_costmap_age', agei, 'base', bb, '.png', sep = ''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
outPlot <- ggplot(results, aes(x = acc)) +
geom_histogram()
png(paste( 'acc_hist_age', agei, 'base', bb, '.png', sep = ''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
ggplot(results, aes(x = FPR, y = TPR)) + geom_jitter()
}
baseVals = c(.0148, .187)
costRatio = logspace(-3,3,100)
costRatio = logspace(-3,3,100)
for(agei in 1:3){
temp = resultsDif[resultsDif$ageGroup == agei,]
tempRes = resultsTRAIN[resultsDif$ageGroup == agei,]
candidates = which(temp$sex > .8 & tempRes$sex > thresh)
target = candidates[which.max(tempRes[candidates,predNames[vari]])]
targName = temp$dependentVariable[target]
# limVals = c(limVals[1] - (limVals[2]-limVals[1])*.5,
#             limVals[2] + (limVals[2]-limVals[1])*.5)
curDat = comboDat %>% filter(ageGroup==agei)
groupID = rep(1,length(curDat$sex))
groupID[curDat$sex != 'M'] = 2
#ALL Female SUBS CODED AS 2
biomark = curDat[,targName]
#is the AD group higher or lower than the CON group?
#default is autistic > control
if(agei>1){
biomark = biomark * -1
}
limVals = quantile(biomark, c(.025,.975))
criteria = rev(seq(limVals[1], limVals[2], (limVals[2] - limVals[1])/100))
criteria = criteria[1:100]
ROC = getROC(biomark, groupID, criteria)
### prep a results data frame to try various base rates
baseRates = c(seq(.001, 1, .01))
results = expand.grid(base=baseRates, costRatio=costRatio)
results$TPR = NaN
results$FPR = NaN
results$acc = NaN
for(bb in 1:length(baseRates)){
print(bb)
baseRate = baseRates[bb]
resi = which(results$base == baseRate)
ADGroup = sample(biomark[groupID==2], round(baseRate*1000000), replace = T )
CONGroup = sample(biomark[groupID==1], round((1-baseRate)*1000000), replace = T)
simBiomark = c(ADGroup, CONGroup)
simID = rep(1,length(simBiomark))
simID[1:length(ADGroup)] = 2
simROC = getROC(simBiomark, simID, criteria)
simROC$TPR[simROC$TPR==0] = 1/1000000
simROC$FPR[simROC$FPR==0] = 1/1000000
for(ii in 1:length(resi)){
ratio = simROC$TPR/simROC$FPR
costVal = ((1-baseRate)/baseRate) * results$costRatio[resi[ii]]
critVal = which(abs(ratio-costVal)==min(abs(ratio-costVal)))
if(length(critVal)>1){
critVal = critVal[1]
}
if(length(critVal)==1){
if(is.finite(critVal)){
results$TPR[resi[ii]] = simROC$TPR[critVal]
results$FPR[resi[ii]] = simROC$FPR[critVal]
results$acc[resi[ii]] = simROC$acc[critVal]
results$PPV[resi[ii]] = simROC$hits[critVal] / (simROC$hits[critVal] + simROC$FAs[critVal])
results$infoGain[resi[ii]] = ROC$TP[critVal]*baseRate / (ROC$TP[critVal]*baseRate + ROC$FP[critVal]*(1-baseRate))
}
}
}
}
breakPoints =  c(.001, .01, .1, 1, 10, 100, 1000)
outPlot <- ggplot(results, aes(x=base, y = costRatio, fill = TPR-FPR)) +
geom_tile() +
scale_y_log10(breaks = breakPoints) +
scale_fill_gradient(low = '#FFFFFF', high = '#3A317D', na.value = 'white') +
theme_classic() +
geom_vline(xintercept = .0148, size = 2, linetype = 'longdash', color = 'red', alpha = .5) +
geom_vline(xintercept = .187, size = 2, linetype = 'longdash', color = 'red', alpha = .5) +
geom_vline(xintercept = .5, size = 2, linetype = 'longdash', color = 'red', alpha = .5) +
ylab('FP<FN      costRatio     FP>FN') +
xlab('base rate') +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
ggtitle(paste('TPR-FPR as a function of costs and benefits ', as.character(agei), sep = ''))+
guides(color = guide_legend(override.aes = list(size=10)))
locs = seq(-3.5,3.5,1)
for(vv in 1:8){
outPlot = outPlot +
geom_hline(yintercept = 10^locs[vv], color = 'grey', size = 2, linetype =2)
}
locs = c(0,.25,.5,.75,1)
for(vv in 1:length(locs)){
outPlot = outPlot +
geom_vline(xintercept = locs[vv], color = 'grey', size = 2, linetype =2)
}
png(paste( 'TPR_FPR_SEX_age', agei, '.png', sep = ''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
}
